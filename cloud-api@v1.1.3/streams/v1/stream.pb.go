// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/v1/stream.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The status of a stream is affected by API calls made on a stream object.
type StreamStatus int32

const (
	// Status not set
	StreamStatusNone StreamStatus = 0
	// Initially created and no actions have been taken
	StreamStatusNew StreamStatus = 1
	// Running and preparing input and output destinations
	StreamStatusPreparing StreamStatus = 2
	// Preparation is finished and is ready to consume input data
	StreamStatusPrepared StreamStatus = 3
	// Receiving data and pending on miner to be assigned to stream
	StreamStatusPending StreamStatus = 4
	// Miner has started work on stream, but output is not ready for use
	StreamStatusProcessing StreamStatus = 5
	// Output destination is ready to be consumed
	StreamStatusReady StreamStatus = 6
	// Stream has successfully transcoded video and is now complete
	StreamStatusCompleted StreamStatus = 7
	// Stream has not yet received any input data and has been cancelled
	StreamStatusCancelled StreamStatus = 8
	// Stream has attempted to transcode video received, but problems with the transcoder or account caused it to fail
	StreamStatusFailed  StreamStatus = 9
	StreamStatusDeleted StreamStatus = 10
)

var StreamStatus_name = map[int32]string{
	0:  "STREAM_STATUS_NONE",
	1:  "STREAM_STATUS_NEW",
	2:  "STREAM_STATUS_PREPARING",
	3:  "STREAM_STATUS_PREPARED",
	4:  "STREAM_STATUS_PENDING",
	5:  "STREAM_STATUS_PROCESSING",
	6:  "STREAM_STATUS_READY",
	7:  "STREAM_STATUS_COMPLETED",
	8:  "STREAM_STATUS_CANCELLED",
	9:  "STREAM_STATUS_FAILED",
	10: "STREAM_STATUS_DELETED",
}

var StreamStatus_value = map[string]int32{
	"STREAM_STATUS_NONE":       0,
	"STREAM_STATUS_NEW":        1,
	"STREAM_STATUS_PREPARING":  2,
	"STREAM_STATUS_PREPARED":   3,
	"STREAM_STATUS_PENDING":    4,
	"STREAM_STATUS_PROCESSING": 5,
	"STREAM_STATUS_READY":      6,
	"STREAM_STATUS_COMPLETED":  7,
	"STREAM_STATUS_CANCELLED":  8,
	"STREAM_STATUS_FAILED":     9,
	"STREAM_STATUS_DELETED":    10,
}

func (x StreamStatus) String() string {
	return proto.EnumName(StreamStatus_name, int32(x))
}

func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{0}
}

// The status of a stream's ingest is affected by the state of the encoder that's sending video data to the stream.
type InputStatus int32

const (
	// The stream has been created or has ended and is not receiving any input
	InputStatusNone InputStatus = 0
	// Ingest is awaiting for incoming data
	InputStatusPending InputStatus = 1
	// Ingest is receiving data
	InputStatusActive InputStatus = 2
	// Ingest has been failed to process incoming data
	InputStatusError InputStatus = 3
)

var InputStatus_name = map[int32]string{
	0: "INPUT_STATUS_NONE",
	1: "INPUT_STATUS_PENDING",
	2: "INPUT_STATUS_ACTIVE",
	3: "INPUT_STATUS_ERROR",
}

var InputStatus_value = map[string]int32{
	"INPUT_STATUS_NONE":    0,
	"INPUT_STATUS_PENDING": 1,
	"INPUT_STATUS_ACTIVE":  2,
	"INPUT_STATUS_ERROR":   3,
}

func (x InputStatus) String() string {
	return proto.EnumName(InputStatus_name, int32(x))
}

func (InputStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{1}
}

type InputType int32

const (
	InputTypeRTMP   InputType = 0
	InputTypeWebRTC InputType = 1
	InputTypeFile   InputType = 2
)

var InputType_name = map[int32]string{
	0: "INPUT_TYPE_RTMP",
	1: "INPUT_TYPE_WEBRTC",
	2: "INPUT_TYPE_FILE",
}

var InputType_value = map[string]int32{
	"INPUT_TYPE_RTMP":   0,
	"INPUT_TYPE_WEBRTC": 1,
	"INPUT_TYPE_FILE":   2,
}

func (x InputType) String() string {
	return proto.EnumName(InputType_name, int32(x))
}

func (InputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{2}
}

type OutputType int32

const (
	OutputTypeHLS  OutputType = 0
	OutputTypeFile OutputType = 1
)

var OutputType_name = map[int32]string{
	0: "OUTPUT_TYPE_HLS",
	1: "OUTPUT_TYPE_FILE",
}

var OutputType_value = map[string]int32{
	"OUTPUT_TYPE_HLS":  0,
	"OUTPUT_TYPE_FILE": 1,
}

func (x OutputType) String() string {
	return proto.EnumName(OutputType_name, int32(x))
}

func (OutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{3}
}

func init() {
	proto.RegisterEnum("cloud.api.streams.v1.StreamStatus", StreamStatus_name, StreamStatus_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.StreamStatus", StreamStatus_name, StreamStatus_value)
	proto.RegisterEnum("cloud.api.streams.v1.InputStatus", InputStatus_name, InputStatus_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.InputStatus", InputStatus_name, InputStatus_value)
	proto.RegisterEnum("cloud.api.streams.v1.InputType", InputType_name, InputType_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.InputType", InputType_name, InputType_value)
	proto.RegisterEnum("cloud.api.streams.v1.OutputType", OutputType_name, OutputType_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.OutputType", OutputType_name, OutputType_value)
}

func init() { proto.RegisterFile("streams/v1/stream.proto", fileDescriptor_75b77e6ca64568e5) }
func init() { golang_proto.RegisterFile("streams/v1/stream.proto", fileDescriptor_75b77e6ca64568e5) }

var fileDescriptor_75b77e6ca64568e5 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcb, 0x4e, 0xdb, 0x4c,
	0x14, 0xc7, 0x31, 0xf0, 0xf1, 0x95, 0xe9, 0x05, 0x67, 0x12, 0x2e, 0x9d, 0x85, 0xe5, 0x55, 0x55,
	0x45, 0xe0, 0x40, 0x5b, 0x55, 0xdd, 0x1a, 0x7b, 0x52, 0x22, 0x05, 0xc7, 0xb2, 0x4d, 0x11, 0xdd,
	0x20, 0x27, 0x99, 0xba, 0x96, 0x82, 0xc7, 0xf2, 0x25, 0x88, 0x37, 0xa8, 0xfc, 0x08, 0x95, 0xbc,
	0x6a, 0x9f, 0xa2, 0xab, 0x2e, 0x59, 0xf6, 0x09, 0x2a, 0x04, 0x2f, 0x52, 0x79, 0x9c, 0x90, 0x71,
	0x92, 0x55, 0x66, 0xa2, 0xdf, 0x6f, 0xfe, 0x67, 0xce, 0x9c, 0x04, 0xec, 0xc6, 0x49, 0x44, 0xdc,
	0xab, 0xb8, 0x35, 0x3e, 0x6a, 0x95, 0x4b, 0x25, 0x8c, 0x68, 0x42, 0x61, 0x63, 0x30, 0xa2, 0xe9,
	0x50, 0x71, 0x43, 0x5f, 0x99, 0x20, 0xca, 0xf8, 0x08, 0x1d, 0x78, 0x7e, 0xf2, 0x35, 0xed, 0x2b,
	0x03, 0x7a, 0xd5, 0xf2, 0xa8, 0x47, 0x5b, 0x0c, 0xee, 0xa7, 0x5f, 0xd8, 0x8e, 0x6d, 0xd8, 0xaa,
	0x3c, 0x04, 0xed, 0xb3, 0x8f, 0xc1, 0x81, 0x47, 0x82, 0x83, 0xf8, 0xda, 0xf5, 0x3c, 0x12, 0xb5,
	0x68, 0x98, 0xf8, 0x34, 0x88, 0x5b, 0x6e, 0x10, 0xd0, 0xc4, 0x65, 0xeb, 0x92, 0x6e, 0xde, 0xad,
	0x83, 0x67, 0x36, 0xcb, 0xb2, 0x13, 0x37, 0x49, 0x63, 0xb8, 0x0f, 0xa0, 0xed, 0x58, 0x58, 0x3d,
	0xbd, 0xb4, 0x1d, 0xd5, 0x39, 0xb3, 0x2f, 0x8d, 0x9e, 0x81, 0xc5, 0x15, 0xd4, 0xc8, 0x72, 0x59,
	0xe4, 0x49, 0x83, 0x06, 0x04, 0x36, 0x41, 0x6d, 0x8e, 0xc6, 0xe7, 0xa2, 0x80, 0xea, 0x59, 0x2e,
	0x6f, 0x55, 0x60, 0x72, 0x0d, 0xdf, 0x83, 0xdd, 0x2a, 0x6b, 0x5a, 0xd8, 0x54, 0xad, 0x8e, 0xf1,
	0x51, 0x5c, 0x45, 0x2f, 0xb3, 0x5c, 0xde, 0xe6, 0x0d, 0x33, 0x22, 0xa1, 0x1b, 0xf9, 0x81, 0x07,
	0xdf, 0x81, 0x9d, 0x65, 0x1e, 0xd6, 0xc5, 0x35, 0xb4, 0x97, 0xe5, 0x72, 0x63, 0x51, 0x23, 0x43,
	0xf8, 0x06, 0x6c, 0xcf, 0x59, 0xd8, 0xd0, 0x8b, 0xac, 0x75, 0xb4, 0x9b, 0xe5, 0x72, 0xbd, 0x22,
	0x91, 0x60, 0x58, 0x24, 0x7d, 0x00, 0x7b, 0xf3, 0x49, 0x3d, 0x0d, 0xdb, 0x76, 0xa1, 0xfd, 0x87,
	0x50, 0x96, 0xcb, 0x3b, 0xd5, 0x2c, 0x3a, 0x20, 0x71, 0x5c, 0x98, 0x0a, 0xa8, 0x57, 0x4d, 0x0b,
	0xab, 0xfa, 0x85, 0xb8, 0x81, 0xb6, 0xb3, 0x5c, 0xae, 0xf1, 0x92, 0x45, 0xdc, 0xe1, 0xcd, 0x62,
	0x2f, 0xb4, 0xde, 0xa9, 0xd9, 0xc5, 0x0e, 0xd6, 0xc5, 0xff, 0x17, 0x7b, 0xa1, 0xd1, 0xab, 0x70,
	0x44, 0x12, 0x32, 0x5c, 0xe2, 0xa9, 0x86, 0x86, 0xbb, 0x5d, 0xac, 0x8b, 0x4f, 0x96, 0x78, 0x6e,
	0x30, 0x20, 0xa3, 0x11, 0x19, 0xc2, 0x43, 0xd0, 0xa8, 0x7a, 0x6d, 0xb5, 0x53, 0x48, 0x9b, 0x68,
	0x27, 0xcb, 0x65, 0xc8, 0x4b, 0x6d, 0xd7, 0x1f, 0x2d, 0xeb, 0x9f, 0x8e, 0xcb, 0xfa, 0xc0, 0x62,
	0xff, 0x74, 0xc2, 0xaa, 0x43, 0x8d, 0x6f, 0x3f, 0xa4, 0x95, 0x5f, 0x3f, 0xa5, 0xca, 0x44, 0x35,
	0xff, 0x0a, 0xe0, 0x69, 0x27, 0x08, 0xd3, 0x64, 0x32, 0x61, 0x4d, 0x50, 0xeb, 0x18, 0xe6, 0x99,
	0x33, 0x37, 0x60, 0x6c, 0x66, 0x38, 0x8e, 0xcd, 0xd7, 0x21, 0x68, 0x54, 0xd8, 0xe9, 0x23, 0x0a,
	0x65, 0xdd, 0x1c, 0x3e, 0x7d, 0x43, 0x05, 0xd4, 0x2b, 0x86, 0xaa, 0x39, 0x9d, 0x4f, 0x58, 0x5c,
	0x2d, 0x5f, 0x82, 0x13, 0xd4, 0x41, 0xe2, 0x8f, 0x49, 0x31, 0xef, 0x15, 0x1e, 0x5b, 0x56, 0xcf,
	0x12, 0xd7, 0xca, 0x79, 0xe7, 0x70, 0x1c, 0x45, 0x34, 0x42, 0xf5, 0xc9, 0x0d, 0xf9, 0x0b, 0x35,
	0xbf, 0x0b, 0x60, 0x93, 0xed, 0x9d, 0x9b, 0x90, 0xc0, 0x57, 0x60, 0xab, 0x3c, 0xd0, 0xb9, 0x30,
	0xf1, 0xa5, 0xe5, 0x9c, 0x9a, 0xe2, 0x0a, 0xaa, 0x65, 0xb9, 0xfc, 0xfc, 0x91, 0x29, 0xbe, 0x9c,
	0xb5, 0x81, 0x71, 0xe7, 0xf8, 0xd8, 0x72, 0xb4, 0xe9, 0x4f, 0xe7, 0x91, 0x3c, 0x27, 0x7d, 0xcb,
	0xd1, 0xe6, 0xce, 0x6c, 0x77, 0xba, 0xc5, 0x85, 0xaa, 0x67, 0xb6, 0xfd, 0x11, 0x41, 0xb5, 0x49,
	0x79, 0xb3, 0x72, 0x9a, 0x11, 0x00, 0xbd, 0x34, 0xe1, 0x8a, 0xeb, 0x9d, 0x39, 0x8f, 0x27, 0x9d,
	0x74, 0xed, 0x69, 0x71, 0x33, 0xe8, 0xa4, 0x6b, 0xc3, 0xd7, 0x40, 0xe4, 0x39, 0x96, 0x28, 0x20,
	0x98, 0xe5, 0xf2, 0x8b, 0x19, 0xc8, 0x22, 0xe1, 0x24, 0x92, 0x4b, 0x39, 0xde, 0xbb, 0xbd, 0x97,
	0x84, 0x3f, 0xf7, 0x92, 0x70, 0x77, 0x2f, 0x09, 0xbf, 0x1f, 0x24, 0xe1, 0xf6, 0x41, 0x12, 0x3e,
	0xaf, 0x8e, 0x8f, 0xfa, 0x1b, 0xec, 0x5f, 0xe7, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,
	0x27, 0x69, 0x3d, 0x03, 0x05, 0x00, 0x00,
}

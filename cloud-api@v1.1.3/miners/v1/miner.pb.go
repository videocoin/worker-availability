// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miners/v1/miner.proto

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MinerStatus int32

const (
	MinerStatusNew     MinerStatus = 0
	MinerStatusOffline MinerStatus = 1
	MinerStatusIdle    MinerStatus = 2
	MinerStatusBusy    MinerStatus = 3
)

var MinerStatus_name = map[int32]string{
	0: "NEW",
	1: "OFFLINE",
	2: "IDLE",
	3: "BUSY",
}

var MinerStatus_value = map[string]int32{
	"NEW":     0,
	"OFFLINE": 1,
	"IDLE":    2,
	"BUSY":    3,
}

func (x MinerStatus) String() string {
	return proto.EnumName(MinerStatus_name, int32(x))
}

func (MinerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a7d99a35436329cc, []int{0}
}

type SystemInfo struct {
	CpuCores             float64  `protobuf:"fixed64,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	CpuFreq              float64  `protobuf:"fixed64,2,opt,name=cpu_freq,json=cpuFreq,proto3" json:"cpu_freq,omitempty"`
	CpuUsage             float64  `protobuf:"fixed64,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemUsage             float64  `protobuf:"fixed64,10,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`
	MemTotal             float64  `protobuf:"fixed64,11,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	Latitude             float64  `protobuf:"fixed64,12,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,13,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Hw                   string   `protobuf:"bytes,14,opt,name=hw,proto3" json:"hw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemInfo) Reset()         { *m = SystemInfo{} }
func (m *SystemInfo) String() string { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()    {}
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7d99a35436329cc, []int{0}
}
func (m *SystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo.Merge(m, src)
}
func (m *SystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo proto.InternalMessageInfo

func (m *SystemInfo) GetCpuCores() float64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *SystemInfo) GetCpuFreq() float64 {
	if m != nil {
		return m.CpuFreq
	}
	return 0
}

func (m *SystemInfo) GetCpuUsage() float64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *SystemInfo) GetMemUsage() float64 {
	if m != nil {
		return m.MemUsage
	}
	return 0
}

func (m *SystemInfo) GetMemTotal() float64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *SystemInfo) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *SystemInfo) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SystemInfo) GetHw() string {
	if m != nil {
		return m.Hw
	}
	return ""
}

func (*SystemInfo) XXX_MessageName() string {
	return "cloud.api.miners.v1.SystemInfo"
}

type CapacityInfo struct {
	Encode               float64  `protobuf:"fixed64,1,opt,name=encode,proto3" json:"encode,omitempty"`
	Cpu                  float64  `protobuf:"fixed64,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapacityInfo) Reset()         { *m = CapacityInfo{} }
func (m *CapacityInfo) String() string { return proto.CompactTextString(m) }
func (*CapacityInfo) ProtoMessage()    {}
func (*CapacityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7d99a35436329cc, []int{1}
}
func (m *CapacityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapacityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapacityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CapacityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapacityInfo.Merge(m, src)
}
func (m *CapacityInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapacityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapacityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapacityInfo proto.InternalMessageInfo

func (m *CapacityInfo) GetEncode() float64 {
	if m != nil {
		return m.Encode
	}
	return 0
}

func (m *CapacityInfo) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (*CapacityInfo) XXX_MessageName() string {
	return "cloud.api.miners.v1.CapacityInfo"
}
func init() {
	proto.RegisterEnum("cloud.api.miners.v1.MinerStatus", MinerStatus_name, MinerStatus_value)
	golang_proto.RegisterEnum("cloud.api.miners.v1.MinerStatus", MinerStatus_name, MinerStatus_value)
	proto.RegisterType((*SystemInfo)(nil), "cloud.api.miners.v1.SystemInfo")
	golang_proto.RegisterType((*SystemInfo)(nil), "cloud.api.miners.v1.SystemInfo")
	proto.RegisterType((*CapacityInfo)(nil), "cloud.api.miners.v1.CapacityInfo")
	golang_proto.RegisterType((*CapacityInfo)(nil), "cloud.api.miners.v1.CapacityInfo")
}

func init() { proto.RegisterFile("miners/v1/miner.proto", fileDescriptor_a7d99a35436329cc) }
func init() { golang_proto.RegisterFile("miners/v1/miner.proto", fileDescriptor_a7d99a35436329cc) }

var fileDescriptor_a7d99a35436329cc = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x77, 0x12, 0xd9, 0xdd, 0x7e, 0xbb, 0xd6, 0x30, 0xc5, 0x25, 0x66, 0x35, 0x84, 0xf5,
	0xb2, 0x08, 0x26, 0x14, 0x2f, 0x9e, 0xbb, 0xb6, 0x10, 0x58, 0xbb, 0xb0, 0x75, 0x11, 0xbd, 0x2c,
	0xe9, 0x64, 0x92, 0x06, 0x92, 0x4c, 0x9a, 0xcc, 0xb4, 0xf4, 0x0d, 0xa4, 0xef, 0xd0, 0x8b, 0xfa,
	0x14, 0x9e, 0x3c, 0xf6, 0xe8, 0x23, 0x48, 0x8b, 0xef, 0x21, 0x99, 0xa4, 0x35, 0xb2, 0xb7, 0xff,
	0x2f, 0xbf, 0xff, 0x17, 0xe6, 0x9b, 0x81, 0xa7, 0x49, 0x94, 0xd2, 0xbc, 0x70, 0x66, 0x5d, 0x47,
	0x26, 0x3b, 0xcb, 0x19, 0x67, 0xb8, 0x43, 0x62, 0x26, 0x7c, 0xdb, 0xcb, 0x22, 0xbb, 0x2a, 0xd8,
	0xb3, 0xae, 0xf1, 0x3a, 0x8c, 0xf8, 0x44, 0x8c, 0x6d, 0xc2, 0x12, 0x27, 0x64, 0x21, 0x73, 0x64,
	0x77, 0x2c, 0x02, 0x49, 0x12, 0x64, 0xaa, 0xfe, 0x71, 0xf1, 0x07, 0x01, 0x8c, 0x16, 0x05, 0xa7,
	0x89, 0x9b, 0x06, 0x0c, 0x9f, 0x43, 0x8b, 0x64, 0xe2, 0x9e, 0xb0, 0x9c, 0x16, 0x3a, 0xb2, 0xd0,
	0x25, 0xba, 0x3d, 0x26, 0x99, 0xb8, 0x2a, 0x19, 0x3f, 0x83, 0x32, 0xdf, 0x07, 0x39, 0x9d, 0xea,
	0x8a, 0x74, 0x47, 0x24, 0x13, 0x83, 0x9c, 0x4e, 0x77, 0x73, 0xa2, 0xf0, 0x42, 0xaa, 0xab, 0xfb,
	0xb9, 0xbb, 0x92, 0x4b, 0x99, 0xd0, 0xa4, 0x96, 0x50, 0xc9, 0x84, 0x26, 0xff, 0x49, 0xce, 0xb8,
	0x17, 0xeb, 0x27, 0x7b, 0xf9, 0xa1, 0x64, 0x6c, 0xc0, 0x71, 0xec, 0xf1, 0x88, 0x0b, 0x9f, 0xea,
	0xa7, 0x95, 0xdb, 0x31, 0x7e, 0x0e, 0xad, 0x98, 0xa5, 0x61, 0x25, 0x1f, 0x4b, 0xf9, 0xef, 0x03,
	0x6e, 0x83, 0x32, 0x99, 0xeb, 0x6d, 0x0b, 0x5d, 0xb6, 0x6e, 0x95, 0xc9, 0xfc, 0xe2, 0x2d, 0x9c,
	0x5e, 0x79, 0x99, 0x47, 0x22, 0xbe, 0x90, 0x8b, 0x9e, 0xc1, 0x21, 0x4d, 0x09, 0xf3, 0x69, 0xbd,
	0x65, 0x4d, 0x58, 0x03, 0x95, 0x64, 0xa2, 0x5e, 0xaf, 0x8c, 0xaf, 0xbe, 0x22, 0x38, 0x79, 0x5f,
	0x5e, 0xef, 0x88, 0x7b, 0x5c, 0x14, 0xf8, 0x1c, 0xd4, 0x61, 0xff, 0xa3, 0x76, 0x60, 0xe0, 0xe5,
	0xca, 0x6a, 0x37, 0xcc, 0x90, 0xce, 0xf1, 0x4b, 0x38, 0xba, 0x19, 0x0c, 0xae, 0xdd, 0x61, 0x5f,
	0x43, 0xc6, 0xd9, 0x72, 0x65, 0xe1, 0x46, 0xe1, 0x26, 0x08, 0xe2, 0x28, 0xa5, 0xf8, 0x05, 0x3c,
	0x72, 0xdf, 0x5d, 0xf7, 0x35, 0xc5, 0xe8, 0x2c, 0x57, 0xd6, 0x93, 0x46, 0xc3, 0xf5, 0x63, 0xa9,
	0x7b, 0x77, 0xa3, 0x4f, 0x9a, 0xfa, 0x40, 0xf7, 0x44, 0xb1, 0x30, 0x3a, 0x5f, 0xbe, 0x99, 0x07,
	0x3f, 0xbe, 0x9b, 0xcd, 0x43, 0xf5, 0xf4, 0xf5, 0xc6, 0x44, 0xbf, 0x36, 0x26, 0xfa, 0xbd, 0x31,
	0xd1, 0xcf, 0xad, 0x89, 0xd6, 0x5b, 0x13, 0x7d, 0x56, 0x66, 0xdd, 0xf1, 0xa1, 0x7c, 0xe7, 0x37,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x76, 0x10, 0x03, 0xbf, 0x44, 0x02, 0x00, 0x00,
}

func (m *SystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hw) > 0 {
		i -= len(m.Hw)
		copy(dAtA[i:], m.Hw)
		i = encodeVarintMiner(dAtA, i, uint64(len(m.Hw)))
		i--
		dAtA[i] = 0x72
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x69
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x61
	}
	if m.MemTotal != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemTotal))))
		i--
		dAtA[i] = 0x59
	}
	if m.MemUsage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemUsage))))
		i--
		dAtA[i] = 0x51
	}
	if m.CpuUsage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuUsage))))
		i--
		dAtA[i] = 0x19
	}
	if m.CpuFreq != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuFreq))))
		i--
		dAtA[i] = 0x11
	}
	if m.CpuCores != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuCores))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *CapacityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapacityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CapacityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cpu != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cpu))))
		i--
		dAtA[i] = 0x11
	}
	if m.Encode != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Encode))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintMiner(dAtA []byte, offset int, v uint64) int {
	offset -= sovMiner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuCores != 0 {
		n += 9
	}
	if m.CpuFreq != 0 {
		n += 9
	}
	if m.CpuUsage != 0 {
		n += 9
	}
	if m.MemUsage != 0 {
		n += 9
	}
	if m.MemTotal != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	l = len(m.Hw)
	if l > 0 {
		n += 1 + l + sovMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapacityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encode != 0 {
		n += 9
	}
	if m.Cpu != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMiner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiner(x uint64) (n int) {
	return sovMiner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCores", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuCores = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuFreq", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuFreq = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuUsage = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUsage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemUsage = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemTotal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemTotal = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapacityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapacityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapacityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encode", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Encode = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cpu = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMiner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMiner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMiner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMiner = fmt.Errorf("proto: unexpected end of group")
)

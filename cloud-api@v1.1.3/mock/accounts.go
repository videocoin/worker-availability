// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/accounts/v1/account_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/accounts/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAccountServiceClient is a mock of AccountServiceClient interface
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceClientMockRecorder
}

// MockAccountServiceClientMockRecorder is the mock recorder for MockAccountServiceClient
type MockAccountServiceClientMockRecorder struct {
	mock *MockAccountServiceClient
}

// NewMockAccountServiceClient creates a new mock instance
func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceClient) EXPECT() *MockAccountServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAccountServiceClient) Get(ctx context.Context, in *v1.AccountRequest, opts ...grpc.CallOption) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAccountServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountServiceClient)(nil).Get), varargs...)
}

// List mocks base method
func (m *MockAccountServiceClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.Accounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAccountServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountServiceClient)(nil).List), varargs...)
}

// GetByOwner mocks base method
func (m *MockAccountServiceClient) GetByOwner(ctx context.Context, in *v1.AccountRequest, opts ...grpc.CallOption) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByOwner", varargs...)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwner indicates an expected call of GetByOwner
func (mr *MockAccountServiceClientMockRecorder) GetByOwner(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*MockAccountServiceClient)(nil).GetByOwner), varargs...)
}

// Create mocks base method
func (m *MockAccountServiceClient) Create(ctx context.Context, in *v1.AccountRequest, opts ...grpc.CallOption) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAccountServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountServiceClient)(nil).Create), varargs...)
}

// Key mocks base method
func (m *MockAccountServiceClient) Key(ctx context.Context, in *v1.AccountRequest, opts ...grpc.CallOption) (*v1.AccountKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Key", varargs...)
	ret0, _ := ret[0].(*v1.AccountKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key
func (mr *MockAccountServiceClientMockRecorder) Key(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockAccountServiceClient)(nil).Key), varargs...)
}

// MockAccountServiceServer is a mock of AccountServiceServer interface
type MockAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceServerMockRecorder
}

// MockAccountServiceServerMockRecorder is the mock recorder for MockAccountServiceServer
type MockAccountServiceServerMockRecorder struct {
	mock *MockAccountServiceServer
}

// NewMockAccountServiceServer creates a new mock instance
func NewMockAccountServiceServer(ctrl *gomock.Controller) *MockAccountServiceServer {
	mock := &MockAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceServer) EXPECT() *MockAccountServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAccountServiceServer) Get(arg0 context.Context, arg1 *v1.AccountRequest) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAccountServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockAccountServiceServer) List(arg0 context.Context, arg1 *types.Empty) (*v1.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAccountServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountServiceServer)(nil).List), arg0, arg1)
}

// GetByOwner mocks base method
func (m *MockAccountServiceServer) GetByOwner(arg0 context.Context, arg1 *v1.AccountRequest) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwner", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwner indicates an expected call of GetByOwner
func (mr *MockAccountServiceServerMockRecorder) GetByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*MockAccountServiceServer)(nil).GetByOwner), arg0, arg1)
}

// Create mocks base method
func (m *MockAccountServiceServer) Create(arg0 context.Context, arg1 *v1.AccountRequest) (*v1.AccountProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAccountServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountServiceServer)(nil).Create), arg0, arg1)
}

// Key mocks base method
func (m *MockAccountServiceServer) Key(arg0 context.Context, arg1 *v1.AccountRequest) (*v1.AccountKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key
func (mr *MockAccountServiceServerMockRecorder) Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockAccountServiceServer)(nil).Key), arg0, arg1)
}

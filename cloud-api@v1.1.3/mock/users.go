// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/users/v1/user_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/users/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserServiceClient is a mock of UserServiceClient interface
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserServiceClient) Create(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceClient)(nil).Create), varargs...)
}

// Login mocks base method
func (m *MockUserServiceClient) Login(ctx context.Context, in *v1.LoginUserRequest, opts ...grpc.CallOption) (*v1.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*v1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceClient)(nil).Login), varargs...)
}

// Logout mocks base method
func (m *MockUserServiceClient) Logout(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout
func (mr *MockUserServiceClientMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceClient)(nil).Logout), varargs...)
}

// ResetPassword mocks base method
func (m *MockUserServiceClient) ResetPassword(ctx context.Context, in *v1.ResetPasswordUserRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPassword", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserServiceClientMockRecorder) ResetPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserServiceClient)(nil).ResetPassword), varargs...)
}

// Get mocks base method
func (m *MockUserServiceClient) Get(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.UserProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserServiceClient)(nil).Get), varargs...)
}

// GetById mocks base method
func (m *MockUserServiceClient) GetById(ctx context.Context, in *v1.UserRequest, opts ...grpc.CallOption) (*v1.UserProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*v1.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockUserServiceClientMockRecorder) GetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserServiceClient)(nil).GetById), varargs...)
}

// StartRecovery mocks base method
func (m *MockUserServiceClient) StartRecovery(ctx context.Context, in *v1.StartRecoveryUserRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRecovery", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecovery indicates an expected call of StartRecovery
func (mr *MockUserServiceClientMockRecorder) StartRecovery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecovery", reflect.TypeOf((*MockUserServiceClient)(nil).StartRecovery), varargs...)
}

// Recover mocks base method
func (m *MockUserServiceClient) Recover(ctx context.Context, in *v1.RecoverUserRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Recover", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover
func (mr *MockUserServiceClientMockRecorder) Recover(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockUserServiceClient)(nil).Recover), varargs...)
}

// StartConfirmation mocks base method
func (m *MockUserServiceClient) StartConfirmation(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartConfirmation", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfirmation indicates an expected call of StartConfirmation
func (mr *MockUserServiceClientMockRecorder) StartConfirmation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfirmation", reflect.TypeOf((*MockUserServiceClient)(nil).StartConfirmation), varargs...)
}

// Confirm mocks base method
func (m *MockUserServiceClient) Confirm(ctx context.Context, in *v1.ConfirmUserRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Confirm", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm
func (mr *MockUserServiceClientMockRecorder) Confirm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockUserServiceClient)(nil).Confirm), varargs...)
}

// ListApiTokens mocks base method
func (m *MockUserServiceClient) ListApiTokens(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.UserApiListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApiTokens", varargs...)
	ret0, _ := ret[0].(*v1.UserApiListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiTokens indicates an expected call of ListApiTokens
func (mr *MockUserServiceClientMockRecorder) ListApiTokens(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiTokens", reflect.TypeOf((*MockUserServiceClient)(nil).ListApiTokens), varargs...)
}

// CreateApiToken mocks base method
func (m *MockUserServiceClient) CreateApiToken(ctx context.Context, in *v1.UserApiTokenRequest, opts ...grpc.CallOption) (*v1.CreateUserApiTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiToken", varargs...)
	ret0, _ := ret[0].(*v1.CreateUserApiTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiToken indicates an expected call of CreateApiToken
func (mr *MockUserServiceClientMockRecorder) CreateApiToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiToken", reflect.TypeOf((*MockUserServiceClient)(nil).CreateApiToken), varargs...)
}

// DeleteApiToken mocks base method
func (m *MockUserServiceClient) DeleteApiToken(ctx context.Context, in *v1.UserApiTokenRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiToken", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiToken indicates an expected call of DeleteApiToken
func (mr *MockUserServiceClientMockRecorder) DeleteApiToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiToken", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteApiToken), varargs...)
}

// GetApiToken mocks base method
func (m *MockUserServiceClient) GetApiToken(ctx context.Context, in *v1.ApiTokenRequest, opts ...grpc.CallOption) (*v1.UserApiTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiToken", varargs...)
	ret0, _ := ret[0].(*v1.UserApiTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiToken indicates an expected call of GetApiToken
func (mr *MockUserServiceClientMockRecorder) GetApiToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiToken", reflect.TypeOf((*MockUserServiceClient)(nil).GetApiToken), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserServiceServer) Create(arg0 context.Context, arg1 *v1.CreateUserRequest) (*v1.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceServer)(nil).Create), arg0, arg1)
}

// Login mocks base method
func (m *MockUserServiceServer) Login(arg0 context.Context, arg1 *v1.LoginUserRequest) (*v1.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*v1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceServer)(nil).Login), arg0, arg1)
}

// Logout mocks base method
func (m *MockUserServiceServer) Logout(arg0 context.Context, arg1 *types.Empty) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout
func (mr *MockUserServiceServerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceServer)(nil).Logout), arg0, arg1)
}

// ResetPassword mocks base method
func (m *MockUserServiceServer) ResetPassword(arg0 context.Context, arg1 *v1.ResetPasswordUserRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserServiceServerMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserServiceServer)(nil).ResetPassword), arg0, arg1)
}

// Get mocks base method
func (m *MockUserServiceServer) Get(arg0 context.Context, arg1 *types.Empty) (*v1.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserServiceServer)(nil).Get), arg0, arg1)
}

// GetById mocks base method
func (m *MockUserServiceServer) GetById(arg0 context.Context, arg1 *v1.UserRequest) (*v1.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*v1.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockUserServiceServerMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserServiceServer)(nil).GetById), arg0, arg1)
}

// StartRecovery mocks base method
func (m *MockUserServiceServer) StartRecovery(arg0 context.Context, arg1 *v1.StartRecoveryUserRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecovery", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecovery indicates an expected call of StartRecovery
func (mr *MockUserServiceServerMockRecorder) StartRecovery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecovery", reflect.TypeOf((*MockUserServiceServer)(nil).StartRecovery), arg0, arg1)
}

// Recover mocks base method
func (m *MockUserServiceServer) Recover(arg0 context.Context, arg1 *v1.RecoverUserRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover
func (mr *MockUserServiceServerMockRecorder) Recover(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockUserServiceServer)(nil).Recover), arg0, arg1)
}

// StartConfirmation mocks base method
func (m *MockUserServiceServer) StartConfirmation(arg0 context.Context, arg1 *types.Empty) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfirmation", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfirmation indicates an expected call of StartConfirmation
func (mr *MockUserServiceServerMockRecorder) StartConfirmation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfirmation", reflect.TypeOf((*MockUserServiceServer)(nil).StartConfirmation), arg0, arg1)
}

// Confirm mocks base method
func (m *MockUserServiceServer) Confirm(arg0 context.Context, arg1 *v1.ConfirmUserRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm
func (mr *MockUserServiceServerMockRecorder) Confirm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockUserServiceServer)(nil).Confirm), arg0, arg1)
}

// ListApiTokens mocks base method
func (m *MockUserServiceServer) ListApiTokens(arg0 context.Context, arg1 *types.Empty) (*v1.UserApiListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiTokens", arg0, arg1)
	ret0, _ := ret[0].(*v1.UserApiListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiTokens indicates an expected call of ListApiTokens
func (mr *MockUserServiceServerMockRecorder) ListApiTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiTokens", reflect.TypeOf((*MockUserServiceServer)(nil).ListApiTokens), arg0, arg1)
}

// CreateApiToken mocks base method
func (m *MockUserServiceServer) CreateApiToken(arg0 context.Context, arg1 *v1.UserApiTokenRequest) (*v1.CreateUserApiTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiToken", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateUserApiTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiToken indicates an expected call of CreateApiToken
func (mr *MockUserServiceServerMockRecorder) CreateApiToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiToken", reflect.TypeOf((*MockUserServiceServer)(nil).CreateApiToken), arg0, arg1)
}

// DeleteApiToken mocks base method
func (m *MockUserServiceServer) DeleteApiToken(arg0 context.Context, arg1 *v1.UserApiTokenRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiToken", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiToken indicates an expected call of DeleteApiToken
func (mr *MockUserServiceServerMockRecorder) DeleteApiToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiToken", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteApiToken), arg0, arg1)
}

// GetApiToken mocks base method
func (m *MockUserServiceServer) GetApiToken(arg0 context.Context, arg1 *v1.ApiTokenRequest) (*v1.UserApiTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiToken", arg0, arg1)
	ret0, _ := ret[0].(*v1.UserApiTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiToken indicates an expected call of GetApiToken
func (mr *MockUserServiceServerMockRecorder) GetApiToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiToken", reflect.TypeOf((*MockUserServiceServer)(nil).GetApiToken), arg0, arg1)
}

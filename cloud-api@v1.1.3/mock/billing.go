// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/billing/v1/billing_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/billing/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBillingServiceClient is a mock of BillingServiceClient interface
type MockBillingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceClientMockRecorder
}

// MockBillingServiceClientMockRecorder is the mock recorder for MockBillingServiceClient
type MockBillingServiceClientMockRecorder struct {
	mock *MockBillingServiceClient
}

// NewMockBillingServiceClient creates a new mock instance
func NewMockBillingServiceClient(ctrl *gomock.Controller) *MockBillingServiceClient {
	mock := &MockBillingServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBillingServiceClient) EXPECT() *MockBillingServiceClientMockRecorder {
	return m.recorder
}

// GetProfile mocks base method
func (m *MockBillingServiceClient) GetProfile(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.ProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*v1.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockBillingServiceClientMockRecorder) GetProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockBillingServiceClient)(nil).GetProfile), varargs...)
}

// MakePayment mocks base method
func (m *MockBillingServiceClient) MakePayment(ctx context.Context, in *v1.MakePaymentRequest, opts ...grpc.CallOption) (*v1.MakePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakePayment", varargs...)
	ret0, _ := ret[0].(*v1.MakePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePayment indicates an expected call of MakePayment
func (mr *MockBillingServiceClientMockRecorder) MakePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayment", reflect.TypeOf((*MockBillingServiceClient)(nil).MakePayment), varargs...)
}

// GetCharges mocks base method
func (m *MockBillingServiceClient) GetCharges(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.ChargesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharges", varargs...)
	ret0, _ := ret[0].(*v1.ChargesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharges indicates an expected call of GetCharges
func (mr *MockBillingServiceClientMockRecorder) GetCharges(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharges", reflect.TypeOf((*MockBillingServiceClient)(nil).GetCharges), varargs...)
}

// GetTransactions mocks base method
func (m *MockBillingServiceClient) GetTransactions(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.TransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactions", varargs...)
	ret0, _ := ret[0].(*v1.TransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockBillingServiceClientMockRecorder) GetTransactions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockBillingServiceClient)(nil).GetTransactions), varargs...)
}

// GetChartCharges mocks base method
func (m *MockBillingServiceClient) GetChartCharges(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.ChartChargesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChartCharges", varargs...)
	ret0, _ := ret[0].(*v1.ChartChargesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartCharges indicates an expected call of GetChartCharges
func (mr *MockBillingServiceClientMockRecorder) GetChartCharges(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartCharges", reflect.TypeOf((*MockBillingServiceClient)(nil).GetChartCharges), varargs...)
}

// MockBillingServiceServer is a mock of BillingServiceServer interface
type MockBillingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceServerMockRecorder
}

// MockBillingServiceServerMockRecorder is the mock recorder for MockBillingServiceServer
type MockBillingServiceServerMockRecorder struct {
	mock *MockBillingServiceServer
}

// NewMockBillingServiceServer creates a new mock instance
func NewMockBillingServiceServer(ctrl *gomock.Controller) *MockBillingServiceServer {
	mock := &MockBillingServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBillingServiceServer) EXPECT() *MockBillingServiceServerMockRecorder {
	return m.recorder
}

// GetProfile mocks base method
func (m *MockBillingServiceServer) GetProfile(arg0 context.Context, arg1 *types.Empty) (*v1.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockBillingServiceServerMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockBillingServiceServer)(nil).GetProfile), arg0, arg1)
}

// MakePayment mocks base method
func (m *MockBillingServiceServer) MakePayment(arg0 context.Context, arg1 *v1.MakePaymentRequest) (*v1.MakePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePayment", arg0, arg1)
	ret0, _ := ret[0].(*v1.MakePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePayment indicates an expected call of MakePayment
func (mr *MockBillingServiceServerMockRecorder) MakePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayment", reflect.TypeOf((*MockBillingServiceServer)(nil).MakePayment), arg0, arg1)
}

// GetCharges mocks base method
func (m *MockBillingServiceServer) GetCharges(arg0 context.Context, arg1 *types.Empty) (*v1.ChargesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharges", arg0, arg1)
	ret0, _ := ret[0].(*v1.ChargesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharges indicates an expected call of GetCharges
func (mr *MockBillingServiceServerMockRecorder) GetCharges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharges", reflect.TypeOf((*MockBillingServiceServer)(nil).GetCharges), arg0, arg1)
}

// GetTransactions mocks base method
func (m *MockBillingServiceServer) GetTransactions(arg0 context.Context, arg1 *types.Empty) (*v1.TransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0, arg1)
	ret0, _ := ret[0].(*v1.TransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockBillingServiceServerMockRecorder) GetTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockBillingServiceServer)(nil).GetTransactions), arg0, arg1)
}

// GetChartCharges mocks base method
func (m *MockBillingServiceServer) GetChartCharges(arg0 context.Context, arg1 *types.Empty) (*v1.ChartChargesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartCharges", arg0, arg1)
	ret0, _ := ret[0].(*v1.ChartChargesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartCharges indicates an expected call of GetChartCharges
func (mr *MockBillingServiceServerMockRecorder) GetChartCharges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartCharges", reflect.TypeOf((*MockBillingServiceServer)(nil).GetChartCharges), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/emitter/v1/emitter_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/emitter/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEmitterServiceClient is a mock of EmitterServiceClient interface
type MockEmitterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterServiceClientMockRecorder
}

// MockEmitterServiceClientMockRecorder is the mock recorder for MockEmitterServiceClient
type MockEmitterServiceClientMockRecorder struct {
	mock *MockEmitterServiceClient
}

// NewMockEmitterServiceClient creates a new mock instance
func NewMockEmitterServiceClient(ctrl *gomock.Controller) *MockEmitterServiceClient {
	mock := &MockEmitterServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmitterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitterServiceClient) EXPECT() *MockEmitterServiceClientMockRecorder {
	return m.recorder
}

// InitStream mocks base method
func (m *MockEmitterServiceClient) InitStream(ctx context.Context, in *v1.InitStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitStream", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitStream indicates an expected call of InitStream
func (mr *MockEmitterServiceClientMockRecorder) InitStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitStream", reflect.TypeOf((*MockEmitterServiceClient)(nil).InitStream), varargs...)
}

// EndStream mocks base method
func (m *MockEmitterServiceClient) EndStream(ctx context.Context, in *v1.EndStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndStream", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndStream indicates an expected call of EndStream
func (mr *MockEmitterServiceClientMockRecorder) EndStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStream", reflect.TypeOf((*MockEmitterServiceClient)(nil).EndStream), varargs...)
}

// AddInputChunk mocks base method
func (m *MockEmitterServiceClient) AddInputChunk(ctx context.Context, in *v1.AddInputChunkRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddInputChunk", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInputChunk indicates an expected call of AddInputChunk
func (mr *MockEmitterServiceClientMockRecorder) AddInputChunk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInputChunk", reflect.TypeOf((*MockEmitterServiceClient)(nil).AddInputChunk), varargs...)
}

// GetBalance mocks base method
func (m *MockEmitterServiceClient) GetBalance(ctx context.Context, in *v1.BalanceRequest, opts ...grpc.CallOption) (*v1.BalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBalance", varargs...)
	ret0, _ := ret[0].(*v1.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockEmitterServiceClientMockRecorder) GetBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockEmitterServiceClient)(nil).GetBalance), varargs...)
}

// Deposit mocks base method
func (m *MockEmitterServiceClient) Deposit(ctx context.Context, in *v1.DepositRequest, opts ...grpc.CallOption) (*v1.DepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposit", varargs...)
	ret0, _ := ret[0].(*v1.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit
func (mr *MockEmitterServiceClientMockRecorder) Deposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockEmitterServiceClient)(nil).Deposit), varargs...)
}

// ValidateProof mocks base method
func (m *MockEmitterServiceClient) ValidateProof(ctx context.Context, in *v1.ValidateProofRequest, opts ...grpc.CallOption) (*v1.ValidateProofResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateProof", varargs...)
	ret0, _ := ret[0].(*v1.ValidateProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockEmitterServiceClientMockRecorder) ValidateProof(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockEmitterServiceClient)(nil).ValidateProof), varargs...)
}

// ScrapProof mocks base method
func (m *MockEmitterServiceClient) ScrapProof(ctx context.Context, in *v1.ScrapProofRequest, opts ...grpc.CallOption) (*v1.ScrapProofResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScrapProof", varargs...)
	ret0, _ := ret[0].(*v1.ScrapProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapProof indicates an expected call of ScrapProof
func (mr *MockEmitterServiceClientMockRecorder) ScrapProof(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapProof", reflect.TypeOf((*MockEmitterServiceClient)(nil).ScrapProof), varargs...)
}

// MockEmitterServiceServer is a mock of EmitterServiceServer interface
type MockEmitterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterServiceServerMockRecorder
}

// MockEmitterServiceServerMockRecorder is the mock recorder for MockEmitterServiceServer
type MockEmitterServiceServerMockRecorder struct {
	mock *MockEmitterServiceServer
}

// NewMockEmitterServiceServer creates a new mock instance
func NewMockEmitterServiceServer(ctrl *gomock.Controller) *MockEmitterServiceServer {
	mock := &MockEmitterServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmitterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitterServiceServer) EXPECT() *MockEmitterServiceServerMockRecorder {
	return m.recorder
}

// InitStream mocks base method
func (m *MockEmitterServiceServer) InitStream(arg0 context.Context, arg1 *v1.InitStreamRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitStream", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitStream indicates an expected call of InitStream
func (mr *MockEmitterServiceServerMockRecorder) InitStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitStream", reflect.TypeOf((*MockEmitterServiceServer)(nil).InitStream), arg0, arg1)
}

// EndStream mocks base method
func (m *MockEmitterServiceServer) EndStream(arg0 context.Context, arg1 *v1.EndStreamRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndStream", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndStream indicates an expected call of EndStream
func (mr *MockEmitterServiceServerMockRecorder) EndStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStream", reflect.TypeOf((*MockEmitterServiceServer)(nil).EndStream), arg0, arg1)
}

// AddInputChunk mocks base method
func (m *MockEmitterServiceServer) AddInputChunk(arg0 context.Context, arg1 *v1.AddInputChunkRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInputChunk", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInputChunk indicates an expected call of AddInputChunk
func (mr *MockEmitterServiceServerMockRecorder) AddInputChunk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInputChunk", reflect.TypeOf((*MockEmitterServiceServer)(nil).AddInputChunk), arg0, arg1)
}

// GetBalance mocks base method
func (m *MockEmitterServiceServer) GetBalance(arg0 context.Context, arg1 *v1.BalanceRequest) (*v1.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*v1.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockEmitterServiceServerMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockEmitterServiceServer)(nil).GetBalance), arg0, arg1)
}

// Deposit mocks base method
func (m *MockEmitterServiceServer) Deposit(arg0 context.Context, arg1 *v1.DepositRequest) (*v1.DepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0, arg1)
	ret0, _ := ret[0].(*v1.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit
func (mr *MockEmitterServiceServerMockRecorder) Deposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockEmitterServiceServer)(nil).Deposit), arg0, arg1)
}

// ValidateProof mocks base method
func (m *MockEmitterServiceServer) ValidateProof(arg0 context.Context, arg1 *v1.ValidateProofRequest) (*v1.ValidateProofResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProof", arg0, arg1)
	ret0, _ := ret[0].(*v1.ValidateProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockEmitterServiceServerMockRecorder) ValidateProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockEmitterServiceServer)(nil).ValidateProof), arg0, arg1)
}

// ScrapProof mocks base method
func (m *MockEmitterServiceServer) ScrapProof(arg0 context.Context, arg1 *v1.ScrapProofRequest) (*v1.ScrapProofResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapProof", arg0, arg1)
	ret0, _ := ret[0].(*v1.ScrapProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapProof indicates an expected call of ScrapProof
func (mr *MockEmitterServiceServerMockRecorder) ScrapProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapProof", reflect.TypeOf((*MockEmitterServiceServer)(nil).ScrapProof), arg0, arg1)
}

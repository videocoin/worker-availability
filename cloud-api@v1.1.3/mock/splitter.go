// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/splitter/v1/splitter_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/splitter/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSplitterServiceClient is a mock of SplitterServiceClient interface
type MockSplitterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSplitterServiceClientMockRecorder
}

// MockSplitterServiceClientMockRecorder is the mock recorder for MockSplitterServiceClient
type MockSplitterServiceClientMockRecorder struct {
	mock *MockSplitterServiceClient
}

// NewMockSplitterServiceClient creates a new mock instance
func NewMockSplitterServiceClient(ctrl *gomock.Controller) *MockSplitterServiceClient {
	mock := &MockSplitterServiceClient{ctrl: ctrl}
	mock.recorder = &MockSplitterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSplitterServiceClient) EXPECT() *MockSplitterServiceClientMockRecorder {
	return m.recorder
}

// Split mocks base method
func (m *MockSplitterServiceClient) Split(ctx context.Context, in *v1.SplitRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Split", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Split indicates an expected call of Split
func (mr *MockSplitterServiceClientMockRecorder) Split(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockSplitterServiceClient)(nil).Split), varargs...)
}

// MockSplitterServiceServer is a mock of SplitterServiceServer interface
type MockSplitterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSplitterServiceServerMockRecorder
}

// MockSplitterServiceServerMockRecorder is the mock recorder for MockSplitterServiceServer
type MockSplitterServiceServerMockRecorder struct {
	mock *MockSplitterServiceServer
}

// NewMockSplitterServiceServer creates a new mock instance
func NewMockSplitterServiceServer(ctrl *gomock.Controller) *MockSplitterServiceServer {
	mock := &MockSplitterServiceServer{ctrl: ctrl}
	mock.recorder = &MockSplitterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSplitterServiceServer) EXPECT() *MockSplitterServiceServerMockRecorder {
	return m.recorder
}

// Split mocks base method
func (m *MockSplitterServiceServer) Split(arg0 context.Context, arg1 *v1.SplitRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Split indicates an expected call of Split
func (mr *MockSplitterServiceServerMockRecorder) Split(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockSplitterServiceServer)(nil).Split), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/streams/private/v1/streams_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/streams/private/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockStreamsServiceClient is a mock of StreamsServiceClient interface
type MockStreamsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsServiceClientMockRecorder
}

// MockStreamsServiceClientMockRecorder is the mock recorder for MockStreamsServiceClient
type MockStreamsServiceClientMockRecorder struct {
	mock *MockStreamsServiceClient
}

// NewMockStreamsServiceClient creates a new mock instance
func NewMockStreamsServiceClient(ctrl *gomock.Controller) *MockStreamsServiceClient {
	mock := &MockStreamsServiceClient{ctrl: ctrl}
	mock.recorder = &MockStreamsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamsServiceClient) EXPECT() *MockStreamsServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStreamsServiceClient) Get(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStreamsServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStreamsServiceClient)(nil).Get), varargs...)
}

// Publish mocks base method
func (m *MockStreamsServiceClient) Publish(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockStreamsServiceClientMockRecorder) Publish(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockStreamsServiceClient)(nil).Publish), varargs...)
}

// PublishDone mocks base method
func (m *MockStreamsServiceClient) PublishDone(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishDone", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishDone indicates an expected call of PublishDone
func (mr *MockStreamsServiceClientMockRecorder) PublishDone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDone", reflect.TypeOf((*MockStreamsServiceClient)(nil).PublishDone), varargs...)
}

// Complete mocks base method
func (m *MockStreamsServiceClient) Complete(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Complete", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete
func (mr *MockStreamsServiceClientMockRecorder) Complete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockStreamsServiceClient)(nil).Complete), varargs...)
}

// Run mocks base method
func (m *MockStreamsServiceClient) Run(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockStreamsServiceClientMockRecorder) Run(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreamsServiceClient)(nil).Run), varargs...)
}

// Stop mocks base method
func (m *MockStreamsServiceClient) Stop(ctx context.Context, in *v1.StreamRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockStreamsServiceClientMockRecorder) Stop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamsServiceClient)(nil).Stop), varargs...)
}

// UpdateStatus mocks base method
func (m *MockStreamsServiceClient) UpdateStatus(ctx context.Context, in *v1.UpdateStatusRequest, opts ...grpc.CallOption) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockStreamsServiceClientMockRecorder) UpdateStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStreamsServiceClient)(nil).UpdateStatus), varargs...)
}

// MockStreamsServiceServer is a mock of StreamsServiceServer interface
type MockStreamsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsServiceServerMockRecorder
}

// MockStreamsServiceServerMockRecorder is the mock recorder for MockStreamsServiceServer
type MockStreamsServiceServerMockRecorder struct {
	mock *MockStreamsServiceServer
}

// NewMockStreamsServiceServer creates a new mock instance
func NewMockStreamsServiceServer(ctrl *gomock.Controller) *MockStreamsServiceServer {
	mock := &MockStreamsServiceServer{ctrl: ctrl}
	mock.recorder = &MockStreamsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamsServiceServer) EXPECT() *MockStreamsServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStreamsServiceServer) Get(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStreamsServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStreamsServiceServer)(nil).Get), arg0, arg1)
}

// Publish mocks base method
func (m *MockStreamsServiceServer) Publish(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockStreamsServiceServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockStreamsServiceServer)(nil).Publish), arg0, arg1)
}

// PublishDone mocks base method
func (m *MockStreamsServiceServer) PublishDone(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDone", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishDone indicates an expected call of PublishDone
func (mr *MockStreamsServiceServerMockRecorder) PublishDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDone", reflect.TypeOf((*MockStreamsServiceServer)(nil).PublishDone), arg0, arg1)
}

// Complete mocks base method
func (m *MockStreamsServiceServer) Complete(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete
func (mr *MockStreamsServiceServerMockRecorder) Complete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockStreamsServiceServer)(nil).Complete), arg0, arg1)
}

// Run mocks base method
func (m *MockStreamsServiceServer) Run(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockStreamsServiceServerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreamsServiceServer)(nil).Run), arg0, arg1)
}

// Stop mocks base method
func (m *MockStreamsServiceServer) Stop(arg0 context.Context, arg1 *v1.StreamRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockStreamsServiceServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamsServiceServer)(nil).Stop), arg0, arg1)
}

// UpdateStatus mocks base method
func (m *MockStreamsServiceServer) UpdateStatus(arg0 context.Context, arg1 *v1.UpdateStatusRequest) (*v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockStreamsServiceServerMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStreamsServiceServer)(nil).UpdateStatus), arg0, arg1)
}

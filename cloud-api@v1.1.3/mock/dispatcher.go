// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/dispatcher/v1/dispatcher_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/dispatcher/v1"
	v10 "github.com/videocoin/cloud-api/miners/v1"
	v11 "github.com/videocoin/cloud-api/validator/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDispatcherServiceClient is a mock of DispatcherServiceClient interface
type MockDispatcherServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherServiceClientMockRecorder
}

// MockDispatcherServiceClientMockRecorder is the mock recorder for MockDispatcherServiceClient
type MockDispatcherServiceClientMockRecorder struct {
	mock *MockDispatcherServiceClient
}

// NewMockDispatcherServiceClient creates a new mock instance
func NewMockDispatcherServiceClient(ctrl *gomock.Controller) *MockDispatcherServiceClient {
	mock := &MockDispatcherServiceClient{ctrl: ctrl}
	mock.recorder = &MockDispatcherServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcherServiceClient) EXPECT() *MockDispatcherServiceClientMockRecorder {
	return m.recorder
}

// GetPendingTask mocks base method
func (m *MockDispatcherServiceClient) GetPendingTask(ctx context.Context, in *v1.TaskPendingRequest, opts ...grpc.CallOption) (*v1.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPendingTask", varargs...)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTask indicates an expected call of GetPendingTask
func (mr *MockDispatcherServiceClientMockRecorder) GetPendingTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTask", reflect.TypeOf((*MockDispatcherServiceClient)(nil).GetPendingTask), varargs...)
}

// GetTask mocks base method
func (m *MockDispatcherServiceClient) GetTask(ctx context.Context, in *v1.TaskRequest, opts ...grpc.CallOption) (*v1.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTask", varargs...)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockDispatcherServiceClientMockRecorder) GetTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockDispatcherServiceClient)(nil).GetTask), varargs...)
}

// MarkTaskAsCompleted mocks base method
func (m *MockDispatcherServiceClient) MarkTaskAsCompleted(ctx context.Context, in *v1.TaskRequest, opts ...grpc.CallOption) (*v1.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTaskAsCompleted", varargs...)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTaskAsCompleted indicates an expected call of MarkTaskAsCompleted
func (mr *MockDispatcherServiceClientMockRecorder) MarkTaskAsCompleted(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskAsCompleted", reflect.TypeOf((*MockDispatcherServiceClient)(nil).MarkTaskAsCompleted), varargs...)
}

// MarkTaskAsFailed mocks base method
func (m *MockDispatcherServiceClient) MarkTaskAsFailed(ctx context.Context, in *v1.TaskRequest, opts ...grpc.CallOption) (*v1.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTaskAsFailed", varargs...)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTaskAsFailed indicates an expected call of MarkTaskAsFailed
func (mr *MockDispatcherServiceClientMockRecorder) MarkTaskAsFailed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskAsFailed", reflect.TypeOf((*MockDispatcherServiceClient)(nil).MarkTaskAsFailed), varargs...)
}

// ValidateProof mocks base method
func (m *MockDispatcherServiceClient) ValidateProof(ctx context.Context, in *v11.ValidateProofRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateProof", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockDispatcherServiceClientMockRecorder) ValidateProof(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockDispatcherServiceClient)(nil).ValidateProof), varargs...)
}

// Ping mocks base method
func (m *MockDispatcherServiceClient) Ping(ctx context.Context, in *v10.PingRequest, opts ...grpc.CallOption) (*v10.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*v10.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockDispatcherServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDispatcherServiceClient)(nil).Ping), varargs...)
}

// Register mocks base method
func (m *MockDispatcherServiceClient) Register(ctx context.Context, in *v10.RegistrationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockDispatcherServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDispatcherServiceClient)(nil).Register), varargs...)
}

// GetInternalConfig mocks base method
func (m *MockDispatcherServiceClient) GetInternalConfig(ctx context.Context, in *v1.InternalConfigRequest, opts ...grpc.CallOption) (*v1.InternalConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInternalConfig", varargs...)
	ret0, _ := ret[0].(*v1.InternalConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalConfig indicates an expected call of GetInternalConfig
func (mr *MockDispatcherServiceClientMockRecorder) GetInternalConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalConfig", reflect.TypeOf((*MockDispatcherServiceClient)(nil).GetInternalConfig), varargs...)
}

// GetConfig mocks base method
func (m *MockDispatcherServiceClient) GetConfig(ctx context.Context, in *v1.ConfigRequest, opts ...grpc.CallOption) (*v1.ConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*v1.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockDispatcherServiceClientMockRecorder) GetConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockDispatcherServiceClient)(nil).GetConfig), varargs...)
}

// MarkSegmentAsTranscoded mocks base method
func (m *MockDispatcherServiceClient) MarkSegmentAsTranscoded(ctx context.Context, in *v1.TaskSegmentRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkSegmentAsTranscoded", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkSegmentAsTranscoded indicates an expected call of MarkSegmentAsTranscoded
func (mr *MockDispatcherServiceClientMockRecorder) MarkSegmentAsTranscoded(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSegmentAsTranscoded", reflect.TypeOf((*MockDispatcherServiceClient)(nil).MarkSegmentAsTranscoded), varargs...)
}

// MockDispatcherServiceServer is a mock of DispatcherServiceServer interface
type MockDispatcherServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherServiceServerMockRecorder
}

// MockDispatcherServiceServerMockRecorder is the mock recorder for MockDispatcherServiceServer
type MockDispatcherServiceServerMockRecorder struct {
	mock *MockDispatcherServiceServer
}

// NewMockDispatcherServiceServer creates a new mock instance
func NewMockDispatcherServiceServer(ctrl *gomock.Controller) *MockDispatcherServiceServer {
	mock := &MockDispatcherServiceServer{ctrl: ctrl}
	mock.recorder = &MockDispatcherServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcherServiceServer) EXPECT() *MockDispatcherServiceServerMockRecorder {
	return m.recorder
}

// GetPendingTask mocks base method
func (m *MockDispatcherServiceServer) GetPendingTask(arg0 context.Context, arg1 *v1.TaskPendingRequest) (*v1.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTask", arg0, arg1)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTask indicates an expected call of GetPendingTask
func (mr *MockDispatcherServiceServerMockRecorder) GetPendingTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTask", reflect.TypeOf((*MockDispatcherServiceServer)(nil).GetPendingTask), arg0, arg1)
}

// GetTask mocks base method
func (m *MockDispatcherServiceServer) GetTask(arg0 context.Context, arg1 *v1.TaskRequest) (*v1.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockDispatcherServiceServerMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockDispatcherServiceServer)(nil).GetTask), arg0, arg1)
}

// MarkTaskAsCompleted mocks base method
func (m *MockDispatcherServiceServer) MarkTaskAsCompleted(arg0 context.Context, arg1 *v1.TaskRequest) (*v1.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskAsCompleted", arg0, arg1)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTaskAsCompleted indicates an expected call of MarkTaskAsCompleted
func (mr *MockDispatcherServiceServerMockRecorder) MarkTaskAsCompleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskAsCompleted", reflect.TypeOf((*MockDispatcherServiceServer)(nil).MarkTaskAsCompleted), arg0, arg1)
}

// MarkTaskAsFailed mocks base method
func (m *MockDispatcherServiceServer) MarkTaskAsFailed(arg0 context.Context, arg1 *v1.TaskRequest) (*v1.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskAsFailed", arg0, arg1)
	ret0, _ := ret[0].(*v1.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTaskAsFailed indicates an expected call of MarkTaskAsFailed
func (mr *MockDispatcherServiceServerMockRecorder) MarkTaskAsFailed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskAsFailed", reflect.TypeOf((*MockDispatcherServiceServer)(nil).MarkTaskAsFailed), arg0, arg1)
}

// ValidateProof mocks base method
func (m *MockDispatcherServiceServer) ValidateProof(arg0 context.Context, arg1 *v11.ValidateProofRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProof", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockDispatcherServiceServerMockRecorder) ValidateProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockDispatcherServiceServer)(nil).ValidateProof), arg0, arg1)
}

// Ping mocks base method
func (m *MockDispatcherServiceServer) Ping(arg0 context.Context, arg1 *v10.PingRequest) (*v10.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*v10.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockDispatcherServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDispatcherServiceServer)(nil).Ping), arg0, arg1)
}

// Register mocks base method
func (m *MockDispatcherServiceServer) Register(arg0 context.Context, arg1 *v10.RegistrationRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockDispatcherServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDispatcherServiceServer)(nil).Register), arg0, arg1)
}

// GetInternalConfig mocks base method
func (m *MockDispatcherServiceServer) GetInternalConfig(arg0 context.Context, arg1 *v1.InternalConfigRequest) (*v1.InternalConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.InternalConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalConfig indicates an expected call of GetInternalConfig
func (mr *MockDispatcherServiceServerMockRecorder) GetInternalConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalConfig", reflect.TypeOf((*MockDispatcherServiceServer)(nil).GetInternalConfig), arg0, arg1)
}

// GetConfig mocks base method
func (m *MockDispatcherServiceServer) GetConfig(arg0 context.Context, arg1 *v1.ConfigRequest) (*v1.ConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockDispatcherServiceServerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockDispatcherServiceServer)(nil).GetConfig), arg0, arg1)
}

// MarkSegmentAsTranscoded mocks base method
func (m *MockDispatcherServiceServer) MarkSegmentAsTranscoded(arg0 context.Context, arg1 *v1.TaskSegmentRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSegmentAsTranscoded", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkSegmentAsTranscoded indicates an expected call of MarkSegmentAsTranscoded
func (mr *MockDispatcherServiceServerMockRecorder) MarkSegmentAsTranscoded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSegmentAsTranscoded", reflect.TypeOf((*MockDispatcherServiceServer)(nil).MarkSegmentAsTranscoded), arg0, arg1)
}

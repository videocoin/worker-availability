// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/validator/v1/validator_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/validator/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockValidatorServiceClient is a mock of ValidatorServiceClient interface
type MockValidatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorServiceClientMockRecorder
}

// MockValidatorServiceClientMockRecorder is the mock recorder for MockValidatorServiceClient
type MockValidatorServiceClientMockRecorder struct {
	mock *MockValidatorServiceClient
}

// NewMockValidatorServiceClient creates a new mock instance
func NewMockValidatorServiceClient(ctrl *gomock.Controller) *MockValidatorServiceClient {
	mock := &MockValidatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockValidatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorServiceClient) EXPECT() *MockValidatorServiceClientMockRecorder {
	return m.recorder
}

// ValidateProof mocks base method
func (m *MockValidatorServiceClient) ValidateProof(ctx context.Context, in *v1.ValidateProofRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateProof", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockValidatorServiceClientMockRecorder) ValidateProof(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockValidatorServiceClient)(nil).ValidateProof), varargs...)
}

// MockValidatorServiceServer is a mock of ValidatorServiceServer interface
type MockValidatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorServiceServerMockRecorder
}

// MockValidatorServiceServerMockRecorder is the mock recorder for MockValidatorServiceServer
type MockValidatorServiceServerMockRecorder struct {
	mock *MockValidatorServiceServer
}

// NewMockValidatorServiceServer creates a new mock instance
func NewMockValidatorServiceServer(ctrl *gomock.Controller) *MockValidatorServiceServer {
	mock := &MockValidatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockValidatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorServiceServer) EXPECT() *MockValidatorServiceServerMockRecorder {
	return m.recorder
}

// ValidateProof mocks base method
func (m *MockValidatorServiceServer) ValidateProof(arg0 context.Context, arg1 *v1.ValidateProofRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProof", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProof indicates an expected call of ValidateProof
func (mr *MockValidatorServiceServerMockRecorder) ValidateProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProof", reflect.TypeOf((*MockValidatorServiceServer)(nil).ValidateProof), arg0, arg1)
}

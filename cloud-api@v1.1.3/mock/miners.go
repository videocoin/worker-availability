// Code generated by MockGen. DO NOT EDIT.
// Source: /go_workspace/src/github.com/videocoin/cloud-api/miners/v1/miner_service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/videocoin/cloud-api/miners/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMinersServiceClient is a mock of MinersServiceClient interface
type MockMinersServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMinersServiceClientMockRecorder
}

// MockMinersServiceClientMockRecorder is the mock recorder for MockMinersServiceClient
type MockMinersServiceClientMockRecorder struct {
	mock *MockMinersServiceClient
}

// NewMockMinersServiceClient creates a new mock instance
func NewMockMinersServiceClient(ctrl *gomock.Controller) *MockMinersServiceClient {
	mock := &MockMinersServiceClient{ctrl: ctrl}
	mock.recorder = &MockMinersServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMinersServiceClient) EXPECT() *MockMinersServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMinersServiceClient) Create(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMinersServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMinersServiceClient)(nil).Create), varargs...)
}

// All mocks base method
func (m *MockMinersServiceClient) All(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.MinerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "All", varargs...)
	ret0, _ := ret[0].(*v1.MinerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockMinersServiceClientMockRecorder) All(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMinersServiceClient)(nil).All), varargs...)
}

// Get mocks base method
func (m *MockMinersServiceClient) Get(ctx context.Context, in *v1.MinerRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMinersServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMinersServiceClient)(nil).Get), varargs...)
}

// Delete mocks base method
func (m *MockMinersServiceClient) Delete(ctx context.Context, in *v1.MinerRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMinersServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMinersServiceClient)(nil).Delete), varargs...)
}

// Update mocks base method
func (m *MockMinersServiceClient) Update(ctx context.Context, in *v1.UpdateMinerRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMinersServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMinersServiceClient)(nil).Update), varargs...)
}

// List mocks base method
func (m *MockMinersServiceClient) List(ctx context.Context, in *v1.MinerRequest, opts ...grpc.CallOption) (*v1.MinerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.MinerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMinersServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMinersServiceClient)(nil).List), varargs...)
}

// SetTags mocks base method
func (m *MockMinersServiceClient) SetTags(ctx context.Context, in *v1.SetTagsRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTags", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTags indicates an expected call of SetTags
func (mr *MockMinersServiceClientMockRecorder) SetTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockMinersServiceClient)(nil).SetTags), varargs...)
}

// Register mocks base method
func (m *MockMinersServiceClient) Register(ctx context.Context, in *v1.RegistrationRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockMinersServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMinersServiceClient)(nil).Register), varargs...)
}

// GetByID mocks base method
func (m *MockMinersServiceClient) GetByID(ctx context.Context, in *v1.MinerRequest, opts ...grpc.CallOption) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMinersServiceClientMockRecorder) GetByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMinersServiceClient)(nil).GetByID), varargs...)
}

// Ping mocks base method
func (m *MockMinersServiceClient) Ping(ctx context.Context, in *v1.PingRequest, opts ...grpc.CallOption) (*v1.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*v1.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockMinersServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMinersServiceClient)(nil).Ping), varargs...)
}

// AssignTask mocks base method
func (m *MockMinersServiceClient) AssignTask(ctx context.Context, in *v1.AssignTaskRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignTask", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTask indicates an expected call of AssignTask
func (mr *MockMinersServiceClientMockRecorder) AssignTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTask", reflect.TypeOf((*MockMinersServiceClient)(nil).AssignTask), varargs...)
}

// UnassignTask mocks base method
func (m *MockMinersServiceClient) UnassignTask(ctx context.Context, in *v1.AssignTaskRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnassignTask", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignTask indicates an expected call of UnassignTask
func (mr *MockMinersServiceClientMockRecorder) UnassignTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignTask", reflect.TypeOf((*MockMinersServiceClient)(nil).UnassignTask), varargs...)
}

// GetForceTaskList mocks base method
func (m *MockMinersServiceClient) GetForceTaskList(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.ForceTaskListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetForceTaskList", varargs...)
	ret0, _ := ret[0].(*v1.ForceTaskListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForceTaskList indicates an expected call of GetForceTaskList
func (mr *MockMinersServiceClientMockRecorder) GetForceTaskList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForceTaskList", reflect.TypeOf((*MockMinersServiceClient)(nil).GetForceTaskList), varargs...)
}

// GetMinersWithForceTask mocks base method
func (m *MockMinersServiceClient) GetMinersWithForceTask(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.MinersWithForceTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinersWithForceTask", varargs...)
	ret0, _ := ret[0].(*v1.MinersWithForceTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinersWithForceTask indicates an expected call of GetMinersWithForceTask
func (mr *MockMinersServiceClientMockRecorder) GetMinersWithForceTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinersWithForceTask", reflect.TypeOf((*MockMinersServiceClient)(nil).GetMinersWithForceTask), varargs...)
}

// GetMinersCandidates mocks base method
func (m *MockMinersServiceClient) GetMinersCandidates(ctx context.Context, in *v1.MinersCandidatesRequest, opts ...grpc.CallOption) (*v1.MinersCandidatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinersCandidates", varargs...)
	ret0, _ := ret[0].(*v1.MinersCandidatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinersCandidates indicates an expected call of GetMinersCandidates
func (mr *MockMinersServiceClientMockRecorder) GetMinersCandidates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinersCandidates", reflect.TypeOf((*MockMinersServiceClient)(nil).GetMinersCandidates), varargs...)
}

// MockMinersServiceServer is a mock of MinersServiceServer interface
type MockMinersServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMinersServiceServerMockRecorder
}

// MockMinersServiceServerMockRecorder is the mock recorder for MockMinersServiceServer
type MockMinersServiceServerMockRecorder struct {
	mock *MockMinersServiceServer
}

// NewMockMinersServiceServer creates a new mock instance
func NewMockMinersServiceServer(ctrl *gomock.Controller) *MockMinersServiceServer {
	mock := &MockMinersServiceServer{ctrl: ctrl}
	mock.recorder = &MockMinersServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMinersServiceServer) EXPECT() *MockMinersServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMinersServiceServer) Create(arg0 context.Context, arg1 *types.Empty) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMinersServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMinersServiceServer)(nil).Create), arg0, arg1)
}

// All mocks base method
func (m *MockMinersServiceServer) All(arg0 context.Context, arg1 *types.Empty) (*v1.MinerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockMinersServiceServerMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMinersServiceServer)(nil).All), arg0, arg1)
}

// Get mocks base method
func (m *MockMinersServiceServer) Get(arg0 context.Context, arg1 *v1.MinerRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMinersServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMinersServiceServer)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (m *MockMinersServiceServer) Delete(arg0 context.Context, arg1 *v1.MinerRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMinersServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMinersServiceServer)(nil).Delete), arg0, arg1)
}

// Update mocks base method
func (m *MockMinersServiceServer) Update(arg0 context.Context, arg1 *v1.UpdateMinerRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMinersServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMinersServiceServer)(nil).Update), arg0, arg1)
}

// List mocks base method
func (m *MockMinersServiceServer) List(arg0 context.Context, arg1 *v1.MinerRequest) (*v1.MinerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMinersServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMinersServiceServer)(nil).List), arg0, arg1)
}

// SetTags mocks base method
func (m *MockMinersServiceServer) SetTags(arg0 context.Context, arg1 *v1.SetTagsRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTags", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTags indicates an expected call of SetTags
func (mr *MockMinersServiceServerMockRecorder) SetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockMinersServiceServer)(nil).SetTags), arg0, arg1)
}

// Register mocks base method
func (m *MockMinersServiceServer) Register(arg0 context.Context, arg1 *v1.RegistrationRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockMinersServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMinersServiceServer)(nil).Register), arg0, arg1)
}

// GetByID mocks base method
func (m *MockMinersServiceServer) GetByID(arg0 context.Context, arg1 *v1.MinerRequest) (*v1.MinerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMinersServiceServerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMinersServiceServer)(nil).GetByID), arg0, arg1)
}

// Ping mocks base method
func (m *MockMinersServiceServer) Ping(arg0 context.Context, arg1 *v1.PingRequest) (*v1.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*v1.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockMinersServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMinersServiceServer)(nil).Ping), arg0, arg1)
}

// AssignTask mocks base method
func (m *MockMinersServiceServer) AssignTask(arg0 context.Context, arg1 *v1.AssignTaskRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTask", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTask indicates an expected call of AssignTask
func (mr *MockMinersServiceServerMockRecorder) AssignTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTask", reflect.TypeOf((*MockMinersServiceServer)(nil).AssignTask), arg0, arg1)
}

// UnassignTask mocks base method
func (m *MockMinersServiceServer) UnassignTask(arg0 context.Context, arg1 *v1.AssignTaskRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignTask", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignTask indicates an expected call of UnassignTask
func (mr *MockMinersServiceServerMockRecorder) UnassignTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignTask", reflect.TypeOf((*MockMinersServiceServer)(nil).UnassignTask), arg0, arg1)
}

// GetForceTaskList mocks base method
func (m *MockMinersServiceServer) GetForceTaskList(arg0 context.Context, arg1 *types.Empty) (*v1.ForceTaskListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForceTaskList", arg0, arg1)
	ret0, _ := ret[0].(*v1.ForceTaskListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForceTaskList indicates an expected call of GetForceTaskList
func (mr *MockMinersServiceServerMockRecorder) GetForceTaskList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForceTaskList", reflect.TypeOf((*MockMinersServiceServer)(nil).GetForceTaskList), arg0, arg1)
}

// GetMinersWithForceTask mocks base method
func (m *MockMinersServiceServer) GetMinersWithForceTask(arg0 context.Context, arg1 *types.Empty) (*v1.MinersWithForceTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinersWithForceTask", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinersWithForceTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinersWithForceTask indicates an expected call of GetMinersWithForceTask
func (mr *MockMinersServiceServerMockRecorder) GetMinersWithForceTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinersWithForceTask", reflect.TypeOf((*MockMinersServiceServer)(nil).GetMinersWithForceTask), arg0, arg1)
}

// GetMinersCandidates mocks base method
func (m *MockMinersServiceServer) GetMinersCandidates(arg0 context.Context, arg1 *v1.MinersCandidatesRequest) (*v1.MinersCandidatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinersCandidates", arg0, arg1)
	ret0, _ := ret[0].(*v1.MinersCandidatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinersCandidates indicates an expected call of GetMinersCandidates
func (mr *MockMinersServiceServerMockRecorder) GetMinersCandidates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinersCandidates", reflect.TypeOf((*MockMinersServiceServer)(nil).GetMinersCandidates), arg0, arg1)
}

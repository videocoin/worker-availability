// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: splitter/v1/splitter_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SplitRequest struct {
	Filepath             string   `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	StreamID             string   `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplitRequest) Reset()         { *m = SplitRequest{} }
func (m *SplitRequest) String() string { return proto.CompactTextString(m) }
func (*SplitRequest) ProtoMessage()    {}
func (*SplitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a268a48086412a, []int{0}
}
func (m *SplitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitRequest.Merge(m, src)
}
func (m *SplitRequest) XXX_Size() int {
	return m.Size()
}
func (m *SplitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SplitRequest proto.InternalMessageInfo

func (m *SplitRequest) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *SplitRequest) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (*SplitRequest) XXX_MessageName() string {
	return "cloud.api.splitter.v1.SplitRequest"
}
func init() {
	proto.RegisterType((*SplitRequest)(nil), "cloud.api.splitter.v1.SplitRequest")
	golang_proto.RegisterType((*SplitRequest)(nil), "cloud.api.splitter.v1.SplitRequest")
}

func init() { proto.RegisterFile("splitter/v1/splitter_service.proto", fileDescriptor_d7a268a48086412a) }
func init() {
	golang_proto.RegisterFile("splitter/v1/splitter_service.proto", fileDescriptor_d7a268a48086412a)
}

var fileDescriptor_d7a268a48086412a = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xf4, 0x30,
	0x14, 0x85, 0xff, 0x0c, 0xfc, 0xd2, 0x09, 0x03, 0x42, 0x41, 0x29, 0x55, 0xaa, 0xd4, 0x8d, 0x2e,
	0x4c, 0xa8, 0xbe, 0xc1, 0xa0, 0xc2, 0x6c, 0x5b, 0x5c, 0xe8, 0x66, 0x48, 0xdb, 0x4c, 0x27, 0xd0,
	0xf6, 0xc6, 0xf6, 0xb6, 0xe0, 0xdb, 0xb9, 0x9c, 0xa5, 0x4f, 0x20, 0xd2, 0x79, 0x11, 0x69, 0xda,
	0xaa, 0x0b, 0x77, 0xf7, 0xdc, 0x73, 0x92, 0x9c, 0x2f, 0xd4, 0xaf, 0x75, 0xae, 0x10, 0x65, 0xc5,
	0xdb, 0x80, 0x4f, 0xf3, 0xba, 0x96, 0x55, 0xab, 0x12, 0xc9, 0x74, 0x05, 0x08, 0xf6, 0x51, 0x92,
	0x43, 0x93, 0x32, 0xa1, 0x15, 0x9b, 0x12, 0xac, 0x0d, 0xdc, 0x93, 0x0c, 0x20, 0xcb, 0x25, 0x37,
	0xa1, 0xb8, 0xd9, 0x70, 0x59, 0x68, 0x7c, 0x1d, 0xce, 0xb8, 0xa7, 0xa3, 0x29, 0xb4, 0xe2, 0xa2,
	0x2c, 0x01, 0x05, 0x2a, 0x28, 0xeb, 0xd1, 0xbd, 0xce, 0x14, 0x6e, 0x9b, 0x98, 0x25, 0x50, 0xf0,
	0x0c, 0x32, 0xf8, 0xb9, 0xa3, 0x57, 0x46, 0x98, 0x69, 0x88, 0xfb, 0x8f, 0x74, 0x11, 0xf5, 0x0f,
	0x87, 0xf2, 0xa5, 0x91, 0x35, 0xda, 0x2e, 0xb5, 0x36, 0x2a, 0x97, 0x5a, 0xe0, 0xd6, 0x21, 0xe7,
	0xe4, 0x72, 0x1e, 0x7e, 0x6b, 0xfb, 0x8a, 0xce, 0x6b, 0xac, 0xa4, 0x28, 0xd6, 0x2a, 0x75, 0x66,
	0xbd, 0xb9, 0x5c, 0x74, 0x1f, 0x67, 0x56, 0x64, 0x96, 0xab, 0xbb, 0xd0, 0x1a, 0xec, 0x55, 0x7a,
	0xf3, 0x44, 0x0f, 0xa3, 0x91, 0x27, 0x1a, 0x80, 0xed, 0x07, 0xfa, 0xdf, 0xac, 0xec, 0x0b, 0xf6,
	0x27, 0x34, 0xfb, 0xdd, 0xc3, 0x3d, 0x66, 0x03, 0x25, 0x9b, 0xea, 0xb3, 0xfb, 0xfe, 0x0b, 0xfc,
	0x7f, 0x4b, 0x67, 0xd7, 0x79, 0xe4, 0xbd, 0xf3, 0xc8, 0x67, 0xe7, 0x91, 0xb7, 0xbd, 0x47, 0x76,
	0x7b, 0x8f, 0x3c, 0xcf, 0xda, 0x20, 0x3e, 0x30, 0xd9, 0xdb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x1a, 0x3f, 0x45, 0x79, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SplitterServiceClient is the client API for SplitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SplitterServiceClient interface {
	Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type splitterServiceClient struct {
	cc *grpc.ClientConn
}

func NewSplitterServiceClient(cc *grpc.ClientConn) SplitterServiceClient {
	return &splitterServiceClient{cc}
}

func (c *splitterServiceClient) Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.splitter.v1.SplitterService/Split", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitterServiceServer is the server API for SplitterService service.
type SplitterServiceServer interface {
	Split(context.Context, *SplitRequest) (*types.Empty, error)
}

// UnimplementedSplitterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSplitterServiceServer struct {
}

func (*UnimplementedSplitterServiceServer) Split(ctx context.Context, req *SplitRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Split not implemented")
}

func RegisterSplitterServiceServer(s *grpc.Server, srv SplitterServiceServer) {
	s.RegisterService(&_SplitterService_serviceDesc, srv)
}

func _SplitterService_Split_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitterServiceServer).Split(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.splitter.v1.SplitterService/Split",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitterServiceServer).Split(ctx, req.(*SplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SplitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.splitter.v1.SplitterService",
	HandlerType: (*SplitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Split",
			Handler:    _SplitterService_Split_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "splitter/v1/splitter_service.proto",
}

func (m *SplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamID) > 0 {
		i -= len(m.StreamID)
		copy(dAtA[i:], m.StreamID)
		i = encodeVarintSplitterService(dAtA, i, uint64(len(m.StreamID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Filepath) > 0 {
		i -= len(m.Filepath)
		copy(dAtA[i:], m.Filepath)
		i = encodeVarintSplitterService(dAtA, i, uint64(len(m.Filepath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSplitterService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSplitterService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SplitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filepath)
	if l > 0 {
		n += 1 + l + sovSplitterService(uint64(l))
	}
	l = len(m.StreamID)
	if l > 0 {
		n += 1 + l + sovSplitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSplitterService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSplitterService(x uint64) (n int) {
	return sovSplitterService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSplitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSplitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSplitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSplitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSplitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSplitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSplitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSplitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSplitterService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSplitterService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSplitterService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSplitterService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSplitterService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSplitterService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSplitterService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSplitterService = fmt.Errorf("proto: unexpected end of group")
)

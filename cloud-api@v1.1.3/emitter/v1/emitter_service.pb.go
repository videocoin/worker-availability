// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emitter/v1/emitter_service.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkerState int32

const (
	WorkerStateBonding      WorkerState = 0
	WorkerStateBonded       WorkerState = 1
	WorkerStateUnbonded     WorkerState = 2
	WorkerStateUnbonding    WorkerState = 3
	WorkerStateUnregistered WorkerState = 4
)

var WorkerState_name = map[int32]string{
	0: "BONDING",
	1: "BONDED",
	2: "UNBONDED",
	3: "UNBONDING",
	4: "UNREGISTERED",
}

var WorkerState_value = map[string]int32{
	"BONDING":      0,
	"BONDED":       1,
	"UNBONDED":     2,
	"UNBONDING":    3,
	"UNREGISTERED": 4,
}

func (x WorkerState) String() string {
	return proto.EnumName(WorkerState_name, int32(x))
}

func (WorkerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{0}
}

type Tx struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (*Tx) XXX_MessageName() string {
	return "cloud.api.emitter.v1.Tx"
}

type InitStreamRequest struct {
	StreamId             string   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamContractId     uint64   `protobuf:"varint,3,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	ProfilesIds          []string `protobuf:"bytes,4,rep,name=profiles_ids,json=profilesIds,proto3" json:"profiles_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitStreamRequest) Reset()         { *m = InitStreamRequest{} }
func (m *InitStreamRequest) String() string { return proto.CompactTextString(m) }
func (*InitStreamRequest) ProtoMessage()    {}
func (*InitStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{1}
}
func (m *InitStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitStreamRequest.Merge(m, src)
}
func (m *InitStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitStreamRequest proto.InternalMessageInfo

func (m *InitStreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *InitStreamRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *InitStreamRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *InitStreamRequest) GetProfilesIds() []string {
	if m != nil {
		return m.ProfilesIds
	}
	return nil
}

func (*InitStreamRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.InitStreamRequest"
}

type InitStreamResponse struct {
	RequestStreamTx       string        `protobuf:"bytes,1,opt,name=request_stream_tx,json=requestStreamTx,proto3" json:"request_stream_tx,omitempty"`
	RequestStreamTxStatus ReceiptStatus `protobuf:"varint,2,opt,name=request_stream_tx_status,json=requestStreamTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"request_stream_tx_status,omitempty"`
	ApproveStreamTx       string        `protobuf:"bytes,3,opt,name=approve_stream_tx,json=approveStreamTx,proto3" json:"approve_stream_tx,omitempty"`
	ApproveStreamTxStatus ReceiptStatus `protobuf:"varint,4,opt,name=approve_stream_tx_status,json=approveStreamTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"approve_stream_tx_status,omitempty"`
	CreateStreamTx        string        `protobuf:"bytes,5,opt,name=create_stream_tx,json=createStreamTx,proto3" json:"create_stream_tx,omitempty"`
	CreateStreamTxStatus  ReceiptStatus `protobuf:"varint,6,opt,name=create_stream_tx_status,json=createStreamTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"create_stream_tx_status,omitempty"`
	AllowRefundTx         string        `protobuf:"bytes,7,opt,name=allow_refund_tx,json=allowRefundTx,proto3" json:"allow_refund_tx,omitempty"`
	AllowRefundTxStatus   ReceiptStatus `protobuf:"varint,8,opt,name=allow_refund_tx_status,json=allowRefundTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"allow_refund_tx_status,omitempty"`
	StreamContractAddress string        `protobuf:"bytes,9,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *InitStreamResponse) Reset()         { *m = InitStreamResponse{} }
func (m *InitStreamResponse) String() string { return proto.CompactTextString(m) }
func (*InitStreamResponse) ProtoMessage()    {}
func (*InitStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{2}
}
func (m *InitStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitStreamResponse.Merge(m, src)
}
func (m *InitStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitStreamResponse proto.InternalMessageInfo

func (m *InitStreamResponse) GetRequestStreamTx() string {
	if m != nil {
		return m.RequestStreamTx
	}
	return ""
}

func (m *InitStreamResponse) GetRequestStreamTxStatus() ReceiptStatus {
	if m != nil {
		return m.RequestStreamTxStatus
	}
	return ReceiptStatusUnknown
}

func (m *InitStreamResponse) GetApproveStreamTx() string {
	if m != nil {
		return m.ApproveStreamTx
	}
	return ""
}

func (m *InitStreamResponse) GetApproveStreamTxStatus() ReceiptStatus {
	if m != nil {
		return m.ApproveStreamTxStatus
	}
	return ReceiptStatusUnknown
}

func (m *InitStreamResponse) GetCreateStreamTx() string {
	if m != nil {
		return m.CreateStreamTx
	}
	return ""
}

func (m *InitStreamResponse) GetCreateStreamTxStatus() ReceiptStatus {
	if m != nil {
		return m.CreateStreamTxStatus
	}
	return ReceiptStatusUnknown
}

func (m *InitStreamResponse) GetAllowRefundTx() string {
	if m != nil {
		return m.AllowRefundTx
	}
	return ""
}

func (m *InitStreamResponse) GetAllowRefundTxStatus() ReceiptStatus {
	if m != nil {
		return m.AllowRefundTxStatus
	}
	return ReceiptStatusUnknown
}

func (m *InitStreamResponse) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (*InitStreamResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.InitStreamResponse"
}

type EndStreamRequest struct {
	StreamId              string   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId                string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamContractId      uint64   `protobuf:"varint,3,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string   `protobuf:"bytes,4,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EndStreamRequest) Reset()         { *m = EndStreamRequest{} }
func (m *EndStreamRequest) String() string { return proto.CompactTextString(m) }
func (*EndStreamRequest) ProtoMessage()    {}
func (*EndStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{3}
}
func (m *EndStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndStreamRequest.Merge(m, src)
}
func (m *EndStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndStreamRequest proto.InternalMessageInfo

func (m *EndStreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *EndStreamRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EndStreamRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *EndStreamRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (*EndStreamRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.EndStreamRequest"
}

type EndStreamResponse struct {
	EndStreamTx          string        `protobuf:"bytes,1,opt,name=end_stream_tx,json=endStreamTx,proto3" json:"end_stream_tx,omitempty"`
	EndStreamTxStatus    ReceiptStatus `protobuf:"varint,2,opt,name=end_stream_tx_status,json=endStreamTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"end_stream_tx_status,omitempty"`
	EscrowRefundTx       string        `protobuf:"bytes,3,opt,name=escrow_refund_tx,json=escrowRefundTx,proto3" json:"escrow_refund_tx,omitempty"`
	EscrowRefundTxStatus ReceiptStatus `protobuf:"varint,4,opt,name=escrow_refund_tx_status,json=escrowRefundTxStatus,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"escrow_refund_tx_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EndStreamResponse) Reset()         { *m = EndStreamResponse{} }
func (m *EndStreamResponse) String() string { return proto.CompactTextString(m) }
func (*EndStreamResponse) ProtoMessage()    {}
func (*EndStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{4}
}
func (m *EndStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndStreamResponse.Merge(m, src)
}
func (m *EndStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *EndStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndStreamResponse proto.InternalMessageInfo

func (m *EndStreamResponse) GetEndStreamTx() string {
	if m != nil {
		return m.EndStreamTx
	}
	return ""
}

func (m *EndStreamResponse) GetEndStreamTxStatus() ReceiptStatus {
	if m != nil {
		return m.EndStreamTxStatus
	}
	return ReceiptStatusUnknown
}

func (m *EndStreamResponse) GetEscrowRefundTx() string {
	if m != nil {
		return m.EscrowRefundTx
	}
	return ""
}

func (m *EndStreamResponse) GetEscrowRefundTxStatus() ReceiptStatus {
	if m != nil {
		return m.EscrowRefundTxStatus
	}
	return ReceiptStatusUnknown
}

func (*EndStreamResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.EndStreamResponse"
}

type AddInputChunkRequest struct {
	StreamContractId     uint64   `protobuf:"varint,1,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	ChunkId              uint64   `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Reward               float64  `protobuf:"fixed64,4,opt,name=reward,proto3" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddInputChunkRequest) Reset()         { *m = AddInputChunkRequest{} }
func (m *AddInputChunkRequest) String() string { return proto.CompactTextString(m) }
func (*AddInputChunkRequest) ProtoMessage()    {}
func (*AddInputChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{5}
}
func (m *AddInputChunkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddInputChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddInputChunkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddInputChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddInputChunkRequest.Merge(m, src)
}
func (m *AddInputChunkRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddInputChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddInputChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddInputChunkRequest proto.InternalMessageInfo

func (m *AddInputChunkRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *AddInputChunkRequest) GetChunkId() uint64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *AddInputChunkRequest) GetReward() float64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (*AddInputChunkRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.AddInputChunkRequest"
}

type AddInputChunkResponse struct {
	Tx                   string        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Status               ReceiptStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddInputChunkResponse) Reset()         { *m = AddInputChunkResponse{} }
func (m *AddInputChunkResponse) String() string { return proto.CompactTextString(m) }
func (*AddInputChunkResponse) ProtoMessage()    {}
func (*AddInputChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{6}
}
func (m *AddInputChunkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddInputChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddInputChunkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddInputChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddInputChunkResponse.Merge(m, src)
}
func (m *AddInputChunkResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddInputChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddInputChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddInputChunkResponse proto.InternalMessageInfo

func (m *AddInputChunkResponse) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *AddInputChunkResponse) GetStatus() ReceiptStatus {
	if m != nil {
		return m.Status
	}
	return ReceiptStatusUnknown
}

func (*AddInputChunkResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.AddInputChunkResponse"
}

type BalanceRequest struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceRequest) Reset()         { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()    {}
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{7}
}
func (m *BalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceRequest.Merge(m, src)
}
func (m *BalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceRequest proto.InternalMessageInfo

func (m *BalanceRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (*BalanceRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.BalanceRequest"
}

type BalanceResponse struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceResponse) Reset()         { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()    {}
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{8}
}
func (m *BalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceResponse.Merge(m, src)
}
func (m *BalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceResponse proto.InternalMessageInfo

func (m *BalanceResponse) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BalanceResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (*BalanceResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.BalanceResponse"
}

type DepositRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamId             string   `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	To                   []byte   `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value                []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{9}
}
func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

func (m *DepositRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DepositRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *DepositRequest) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DepositRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (*DepositRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.DepositRequest"
}

type DepositResponse struct {
	Tx                   string        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Status               ReceiptStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DepositResponse) Reset()         { *m = DepositResponse{} }
func (m *DepositResponse) String() string { return proto.CompactTextString(m) }
func (*DepositResponse) ProtoMessage()    {}
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{10}
}
func (m *DepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositResponse.Merge(m, src)
}
func (m *DepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *DepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositResponse proto.InternalMessageInfo

func (m *DepositResponse) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *DepositResponse) GetStatus() ReceiptStatus {
	if m != nil {
		return m.Status
	}
	return ReceiptStatusUnknown
}

func (*DepositResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.DepositResponse"
}

type ValidateProofRequest struct {
	StreamContractAddress string   `protobuf:"bytes,1,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	ProfileId             []byte   `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ChunkId               []byte   `protobuf:"bytes,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ValidateProofRequest) Reset()         { *m = ValidateProofRequest{} }
func (m *ValidateProofRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateProofRequest) ProtoMessage()    {}
func (*ValidateProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{11}
}
func (m *ValidateProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateProofRequest.Merge(m, src)
}
func (m *ValidateProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateProofRequest proto.InternalMessageInfo

func (m *ValidateProofRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *ValidateProofRequest) GetProfileId() []byte {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *ValidateProofRequest) GetChunkId() []byte {
	if m != nil {
		return m.ChunkId
	}
	return nil
}

func (*ValidateProofRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.ValidateProofRequest"
}

type ValidateProofResponse struct {
	Tx                   string        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Status               ReceiptStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ValidateProofResponse) Reset()         { *m = ValidateProofResponse{} }
func (m *ValidateProofResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateProofResponse) ProtoMessage()    {}
func (*ValidateProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{12}
}
func (m *ValidateProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateProofResponse.Merge(m, src)
}
func (m *ValidateProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateProofResponse proto.InternalMessageInfo

func (m *ValidateProofResponse) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *ValidateProofResponse) GetStatus() ReceiptStatus {
	if m != nil {
		return m.Status
	}
	return ReceiptStatusUnknown
}

func (*ValidateProofResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.ValidateProofResponse"
}

type ScrapProofRequest struct {
	StreamContractAddress string   `protobuf:"bytes,1,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	ProfileId             []byte   `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ChunkId               []byte   `protobuf:"bytes,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ScrapProofRequest) Reset()         { *m = ScrapProofRequest{} }
func (m *ScrapProofRequest) String() string { return proto.CompactTextString(m) }
func (*ScrapProofRequest) ProtoMessage()    {}
func (*ScrapProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{13}
}
func (m *ScrapProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScrapProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScrapProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScrapProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrapProofRequest.Merge(m, src)
}
func (m *ScrapProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScrapProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrapProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScrapProofRequest proto.InternalMessageInfo

func (m *ScrapProofRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *ScrapProofRequest) GetProfileId() []byte {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *ScrapProofRequest) GetChunkId() []byte {
	if m != nil {
		return m.ChunkId
	}
	return nil
}

func (*ScrapProofRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.ScrapProofRequest"
}

type ScrapProofResponse struct {
	Tx                   string        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Status               ReceiptStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.api.emitter.v1.ReceiptStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ScrapProofResponse) Reset()         { *m = ScrapProofResponse{} }
func (m *ScrapProofResponse) String() string { return proto.CompactTextString(m) }
func (*ScrapProofResponse) ProtoMessage()    {}
func (*ScrapProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{14}
}
func (m *ScrapProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScrapProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScrapProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScrapProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrapProofResponse.Merge(m, src)
}
func (m *ScrapProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScrapProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrapProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScrapProofResponse proto.InternalMessageInfo

func (m *ScrapProofResponse) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *ScrapProofResponse) GetStatus() ReceiptStatus {
	if m != nil {
		return m.Status
	}
	return ReceiptStatusUnknown
}

func (*ScrapProofResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.ScrapProofResponse"
}

type WorkerRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerRequest) Reset()         { *m = WorkerRequest{} }
func (m *WorkerRequest) String() string { return proto.CompactTextString(m) }
func (*WorkerRequest) ProtoMessage()    {}
func (*WorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{15}
}
func (m *WorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerRequest.Merge(m, src)
}
func (m *WorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerRequest proto.InternalMessageInfo

func (m *WorkerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (*WorkerRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.WorkerRequest"
}

type WorkerResponse struct {
	Address              string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	State                WorkerState `protobuf:"varint,2,opt,name=state,proto3,enum=cloud.api.emitter.v1.WorkerState" json:"state,omitempty"`
	TotalStake           string      `protobuf:"bytes,3,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	SelfStake            string      `protobuf:"bytes,4,opt,name=self_stake,json=selfStake,proto3" json:"self_stake,omitempty"`
	DelegatedStake       string      `protobuf:"bytes,5,opt,name=delegated_stake,json=delegatedStake,proto3" json:"delegated_stake,omitempty"`
	RegisteredAt         *time.Time  `protobuf:"bytes,6,opt,name=registered_at,json=registeredAt,proto3,stdtime" json:"registered_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WorkerResponse) Reset()         { *m = WorkerResponse{} }
func (m *WorkerResponse) String() string { return proto.CompactTextString(m) }
func (*WorkerResponse) ProtoMessage()    {}
func (*WorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{16}
}
func (m *WorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerResponse.Merge(m, src)
}
func (m *WorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerResponse proto.InternalMessageInfo

func (m *WorkerResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WorkerResponse) GetState() WorkerState {
	if m != nil {
		return m.State
	}
	return WorkerStateBonding
}

func (m *WorkerResponse) GetTotalStake() string {
	if m != nil {
		return m.TotalStake
	}
	return ""
}

func (m *WorkerResponse) GetSelfStake() string {
	if m != nil {
		return m.SelfStake
	}
	return ""
}

func (m *WorkerResponse) GetDelegatedStake() string {
	if m != nil {
		return m.DelegatedStake
	}
	return ""
}

func (m *WorkerResponse) GetRegisteredAt() *time.Time {
	if m != nil {
		return m.RegisteredAt
	}
	return nil
}

func (*WorkerResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.WorkerResponse"
}

type ListWorkersResponse struct {
	Items                []*WorkerResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListWorkersResponse) Reset()         { *m = ListWorkersResponse{} }
func (m *ListWorkersResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkersResponse) ProtoMessage()    {}
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{17}
}
func (m *ListWorkersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkersResponse.Merge(m, src)
}
func (m *ListWorkersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkersResponse proto.InternalMessageInfo

func (m *ListWorkersResponse) GetItems() []*WorkerResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*ListWorkersResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.ListWorkersResponse"
}

type AddFundsRequest struct {
	UserID               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountUsd            float64  `protobuf:"fixed64,2,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFundsRequest) Reset()         { *m = AddFundsRequest{} }
func (m *AddFundsRequest) String() string { return proto.CompactTextString(m) }
func (*AddFundsRequest) ProtoMessage()    {}
func (*AddFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{18}
}
func (m *AddFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFundsRequest.Merge(m, src)
}
func (m *AddFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddFundsRequest proto.InternalMessageInfo

func (m *AddFundsRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddFundsRequest) GetAmountUsd() float64 {
	if m != nil {
		return m.AmountUsd
	}
	return 0
}

func (*AddFundsRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.AddFundsRequest"
}

type AddFundsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFundsResponse) Reset()         { *m = AddFundsResponse{} }
func (m *AddFundsResponse) String() string { return proto.CompactTextString(m) }
func (*AddFundsResponse) ProtoMessage()    {}
func (*AddFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{19}
}
func (m *AddFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFundsResponse.Merge(m, src)
}
func (m *AddFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddFundsResponse proto.InternalMessageInfo

func (*AddFundsResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.AddFundsResponse"
}

type RewardRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardRequest) Reset()         { *m = RewardRequest{} }
func (m *RewardRequest) String() string { return proto.CompactTextString(m) }
func (*RewardRequest) ProtoMessage()    {}
func (*RewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{20}
}
func (m *RewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardRequest.Merge(m, src)
}
func (m *RewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardRequest proto.InternalMessageInfo

func (m *RewardRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (*RewardRequest) XXX_MessageName() string {
	return "cloud.api.emitter.v1.RewardRequest"
}

type RewardResponse struct {
	Reward               float64  `protobuf:"fixed64,1,opt,name=reward,proto3" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardResponse) Reset()         { *m = RewardResponse{} }
func (m *RewardResponse) String() string { return proto.CompactTextString(m) }
func (*RewardResponse) ProtoMessage()    {}
func (*RewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_595d714f170d55af, []int{21}
}
func (m *RewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardResponse.Merge(m, src)
}
func (m *RewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardResponse proto.InternalMessageInfo

func (m *RewardResponse) GetReward() float64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (*RewardResponse) XXX_MessageName() string {
	return "cloud.api.emitter.v1.RewardResponse"
}
func init() {
	proto.RegisterEnum("cloud.api.emitter.v1.WorkerState", WorkerState_name, WorkerState_value)
	golang_proto.RegisterEnum("cloud.api.emitter.v1.WorkerState", WorkerState_name, WorkerState_value)
	proto.RegisterType((*Tx)(nil), "cloud.api.emitter.v1.Tx")
	golang_proto.RegisterType((*Tx)(nil), "cloud.api.emitter.v1.Tx")
	proto.RegisterType((*InitStreamRequest)(nil), "cloud.api.emitter.v1.InitStreamRequest")
	golang_proto.RegisterType((*InitStreamRequest)(nil), "cloud.api.emitter.v1.InitStreamRequest")
	proto.RegisterType((*InitStreamResponse)(nil), "cloud.api.emitter.v1.InitStreamResponse")
	golang_proto.RegisterType((*InitStreamResponse)(nil), "cloud.api.emitter.v1.InitStreamResponse")
	proto.RegisterType((*EndStreamRequest)(nil), "cloud.api.emitter.v1.EndStreamRequest")
	golang_proto.RegisterType((*EndStreamRequest)(nil), "cloud.api.emitter.v1.EndStreamRequest")
	proto.RegisterType((*EndStreamResponse)(nil), "cloud.api.emitter.v1.EndStreamResponse")
	golang_proto.RegisterType((*EndStreamResponse)(nil), "cloud.api.emitter.v1.EndStreamResponse")
	proto.RegisterType((*AddInputChunkRequest)(nil), "cloud.api.emitter.v1.AddInputChunkRequest")
	golang_proto.RegisterType((*AddInputChunkRequest)(nil), "cloud.api.emitter.v1.AddInputChunkRequest")
	proto.RegisterType((*AddInputChunkResponse)(nil), "cloud.api.emitter.v1.AddInputChunkResponse")
	golang_proto.RegisterType((*AddInputChunkResponse)(nil), "cloud.api.emitter.v1.AddInputChunkResponse")
	proto.RegisterType((*BalanceRequest)(nil), "cloud.api.emitter.v1.BalanceRequest")
	golang_proto.RegisterType((*BalanceRequest)(nil), "cloud.api.emitter.v1.BalanceRequest")
	proto.RegisterType((*BalanceResponse)(nil), "cloud.api.emitter.v1.BalanceResponse")
	golang_proto.RegisterType((*BalanceResponse)(nil), "cloud.api.emitter.v1.BalanceResponse")
	proto.RegisterType((*DepositRequest)(nil), "cloud.api.emitter.v1.DepositRequest")
	golang_proto.RegisterType((*DepositRequest)(nil), "cloud.api.emitter.v1.DepositRequest")
	proto.RegisterType((*DepositResponse)(nil), "cloud.api.emitter.v1.DepositResponse")
	golang_proto.RegisterType((*DepositResponse)(nil), "cloud.api.emitter.v1.DepositResponse")
	proto.RegisterType((*ValidateProofRequest)(nil), "cloud.api.emitter.v1.ValidateProofRequest")
	golang_proto.RegisterType((*ValidateProofRequest)(nil), "cloud.api.emitter.v1.ValidateProofRequest")
	proto.RegisterType((*ValidateProofResponse)(nil), "cloud.api.emitter.v1.ValidateProofResponse")
	golang_proto.RegisterType((*ValidateProofResponse)(nil), "cloud.api.emitter.v1.ValidateProofResponse")
	proto.RegisterType((*ScrapProofRequest)(nil), "cloud.api.emitter.v1.ScrapProofRequest")
	golang_proto.RegisterType((*ScrapProofRequest)(nil), "cloud.api.emitter.v1.ScrapProofRequest")
	proto.RegisterType((*ScrapProofResponse)(nil), "cloud.api.emitter.v1.ScrapProofResponse")
	golang_proto.RegisterType((*ScrapProofResponse)(nil), "cloud.api.emitter.v1.ScrapProofResponse")
	proto.RegisterType((*WorkerRequest)(nil), "cloud.api.emitter.v1.WorkerRequest")
	golang_proto.RegisterType((*WorkerRequest)(nil), "cloud.api.emitter.v1.WorkerRequest")
	proto.RegisterType((*WorkerResponse)(nil), "cloud.api.emitter.v1.WorkerResponse")
	golang_proto.RegisterType((*WorkerResponse)(nil), "cloud.api.emitter.v1.WorkerResponse")
	proto.RegisterType((*ListWorkersResponse)(nil), "cloud.api.emitter.v1.ListWorkersResponse")
	golang_proto.RegisterType((*ListWorkersResponse)(nil), "cloud.api.emitter.v1.ListWorkersResponse")
	proto.RegisterType((*AddFundsRequest)(nil), "cloud.api.emitter.v1.AddFundsRequest")
	golang_proto.RegisterType((*AddFundsRequest)(nil), "cloud.api.emitter.v1.AddFundsRequest")
	proto.RegisterType((*AddFundsResponse)(nil), "cloud.api.emitter.v1.AddFundsResponse")
	golang_proto.RegisterType((*AddFundsResponse)(nil), "cloud.api.emitter.v1.AddFundsResponse")
	proto.RegisterType((*RewardRequest)(nil), "cloud.api.emitter.v1.RewardRequest")
	golang_proto.RegisterType((*RewardRequest)(nil), "cloud.api.emitter.v1.RewardRequest")
	proto.RegisterType((*RewardResponse)(nil), "cloud.api.emitter.v1.RewardResponse")
	golang_proto.RegisterType((*RewardResponse)(nil), "cloud.api.emitter.v1.RewardResponse")
}

func init() { proto.RegisterFile("emitter/v1/emitter_service.proto", fileDescriptor_595d714f170d55af) }
func init() {
	golang_proto.RegisterFile("emitter/v1/emitter_service.proto", fileDescriptor_595d714f170d55af)
}

var fileDescriptor_595d714f170d55af = []byte{
	// 1369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x1b, 0xcf, 0x3a, 0x8e, 0x13, 0x3f, 0x76, 0x1c, 0x67, 0xe2, 0x24, 0x7e, 0xb7, 0xaa, 0xe3, 0x6e,
	0xdf, 0x36, 0x6e, 0xa0, 0x8e, 0x1a, 0x24, 0x90, 0xe0, 0x94, 0x34, 0x26, 0xb2, 0x84, 0x02, 0x6c,
	0x1c, 0xa8, 0x0a, 0xaa, 0xb5, 0xf1, 0x4c, 0x9c, 0xa5, 0xf6, 0xae, 0xd9, 0x99, 0x4d, 0xc3, 0x07,
	0x40, 0xaa, 0x72, 0x42, 0xea, 0x0d, 0x29, 0x27, 0x38, 0x71, 0xe0, 0x03, 0x70, 0xe2, 0xd8, 0x23,
	0x9f, 0x00, 0x50, 0x7a, 0x81, 0x6f, 0x81, 0x66, 0x67, 0x76, 0xbd, 0xbb, 0xf6, 0x26, 0x69, 0xa5,
	0xc0, 0x6d, 0xe7, 0x99, 0xdf, 0x3c, 0xcf, 0x6f, 0x9e, 0xbf, 0xb3, 0x50, 0x25, 0x7d, 0x93, 0x31,
	0xe2, 0xac, 0x1f, 0x3f, 0x58, 0x97, 0x9f, 0x6d, 0x4a, 0x9c, 0x63, 0xb3, 0x43, 0xea, 0x03, 0xc7,
	0x66, 0x36, 0x2a, 0x75, 0x7a, 0xb6, 0x8b, 0xeb, 0xc6, 0xc0, 0xac, 0x4b, 0x40, 0xfd, 0xf8, 0x81,
	0x7a, 0xa3, 0x6b, 0xdb, 0xdd, 0x1e, 0x59, 0xf7, 0x30, 0x07, 0xee, 0xe1, 0x3a, 0xe9, 0x0f, 0xd8,
	0x37, 0xe2, 0x88, 0x7a, 0xbf, 0x6b, 0xb2, 0x23, 0xf7, 0xa0, 0xde, 0xb1, 0xfb, 0xeb, 0x5d, 0xbb,
	0x6b, 0x0f, 0x51, 0x7c, 0xe5, 0x2d, 0xbc, 0x2f, 0x09, 0x5f, 0x89, 0xeb, 0x62, 0x66, 0x9f, 0x50,
	0x66, 0xf4, 0x07, 0x12, 0x50, 0x0e, 0x91, 0x74, 0x48, 0x87, 0x98, 0x03, 0x26, 0x76, 0xb4, 0x32,
	0xa4, 0x5a, 0x27, 0x08, 0x41, 0xfa, 0xc8, 0xa0, 0x47, 0x65, 0xa5, 0xaa, 0xd4, 0xf2, 0xba, 0xf7,
	0xad, 0x7d, 0xaf, 0xc0, 0x7c, 0xd3, 0x32, 0xd9, 0x1e, 0x73, 0x88, 0xd1, 0xd7, 0xc9, 0xd7, 0x2e,
	0xa1, 0x0c, 0xdd, 0x80, 0x2c, 0xf5, 0x04, 0x6d, 0x13, 0x7b, 0xf0, 0xac, 0x3e, 0x23, 0x04, 0x4d,
	0x8c, 0x96, 0x61, 0xda, 0xa5, 0xc4, 0xe1, 0x5b, 0x29, 0x6f, 0x2b, 0xc3, 0x97, 0x4d, 0x8c, 0xde,
	0x06, 0x24, 0x4f, 0x75, 0x6c, 0x8b, 0x39, 0x46, 0x87, 0x71, 0xcc, 0x64, 0x55, 0xa9, 0xa5, 0xf5,
	0xa2, 0xd8, 0x79, 0x28, 0x37, 0x9a, 0x18, 0xdd, 0x82, 0xfc, 0xc0, 0xb1, 0x0f, 0xcd, 0x1e, 0xa1,
	0x6d, 0x13, 0xd3, 0x72, 0xba, 0x3a, 0x59, 0xcb, 0xea, 0x39, 0x5f, 0xd6, 0xc4, 0x54, 0xfb, 0x2b,
	0x0d, 0x28, 0x4c, 0x8e, 0x0e, 0x6c, 0x8b, 0x12, 0xb4, 0x06, 0xf3, 0x8e, 0x20, 0xda, 0x96, 0xf6,
	0xd8, 0x89, 0x64, 0x39, 0x27, 0x37, 0xc4, 0x89, 0xd6, 0x09, 0xfa, 0x12, 0xca, 0x23, 0xd8, 0x36,
	0x65, 0x06, 0x73, 0xa9, 0xc7, 0xbe, 0xb0, 0x71, 0xbb, 0x3e, 0x2e, 0x72, 0x75, 0x5d, 0x38, 0x70,
	0xcf, 0x83, 0xea, 0x8b, 0x31, 0xbd, 0x42, 0xcc, 0x99, 0x18, 0x83, 0x81, 0x63, 0x1f, 0x93, 0x10,
	0x93, 0x49, 0xc1, 0x44, 0x6e, 0x84, 0x99, 0x8c, 0x60, 0x7d, 0x26, 0xe9, 0xd7, 0x60, 0x12, 0xd3,
	0x2b, 0x99, 0xd4, 0xa0, 0xd8, 0x71, 0x88, 0xc1, 0xc2, 0x44, 0xa6, 0x3c, 0x22, 0x05, 0x21, 0x0f,
	0x78, 0x3c, 0x86, 0xe5, 0x38, 0xd2, 0xa7, 0x91, 0xb9, 0x3a, 0x8d, 0x52, 0x54, 0xab, 0x64, 0x71,
	0x17, 0xe6, 0x8c, 0x5e, 0xcf, 0x7e, 0xd6, 0x76, 0xc8, 0xa1, 0x6b, 0x61, 0x4e, 0x62, 0xda, 0x23,
	0x31, 0xeb, 0x89, 0x75, 0x4f, 0xda, 0x3a, 0x41, 0x8f, 0x60, 0x29, 0x86, 0xf3, 0x29, 0xcc, 0x5c,
	0x9d, 0xc2, 0x42, 0x44, 0xa7, 0x64, 0xf0, 0x2e, 0x2c, 0xc7, 0x73, 0xd0, 0xc0, 0xd8, 0x21, 0x94,
	0x96, 0xb3, 0x1e, 0x93, 0xc5, 0x68, 0x22, 0x6e, 0x8a, 0x4d, 0xed, 0x67, 0x05, 0x8a, 0x0d, 0x0b,
	0xff, 0xfb, 0x65, 0x70, 0x01, 0xe1, 0xf4, 0x45, 0x84, 0x5f, 0xa4, 0x60, 0x3e, 0x44, 0x58, 0x96,
	0x86, 0x06, 0xb3, 0xc4, 0xc2, 0x23, 0x65, 0x91, 0x23, 0x3e, 0xb2, 0x75, 0x82, 0x5a, 0x50, 0x8a,
	0x60, 0xde, 0xa0, 0x1c, 0xe6, 0x43, 0xfa, 0x86, 0x09, 0x48, 0x68, 0xc7, 0x89, 0xc4, 0x5e, 0x54,
	0x42, 0x41, 0xc8, 0x83, 0xe0, 0x3f, 0x86, 0xe5, 0x38, 0xf2, 0x0d, 0xea, 0xa0, 0x14, 0xd5, 0x2a,
	0xa4, 0xda, 0x33, 0x28, 0x6d, 0x62, 0xdc, 0xb4, 0x06, 0x2e, 0x7b, 0x78, 0xe4, 0x5a, 0x4f, 0xfd,
	0x48, 0x8e, 0x8f, 0x89, 0x92, 0x10, 0x93, 0xff, 0xc1, 0x4c, 0x87, 0x9f, 0xf6, 0x63, 0x9b, 0xd6,
	0xa7, 0xbd, 0x75, 0x13, 0xa3, 0x25, 0xc8, 0x38, 0xe4, 0x99, 0xe1, 0x60, 0x8f, 0xab, 0xa2, 0xcb,
	0x95, 0x86, 0x61, 0x31, 0x66, 0x58, 0x46, 0xa4, 0x00, 0xa9, 0x20, 0x0c, 0x29, 0x76, 0x82, 0x3e,
	0x80, 0xcc, 0xeb, 0xfb, 0x5b, 0x1e, 0xd1, 0xd6, 0xa0, 0xb0, 0x65, 0xf4, 0x0c, 0xab, 0x43, 0xfc,
	0x8b, 0x95, 0x61, 0xda, 0x4f, 0x17, 0xd1, 0xd6, 0xfd, 0xa5, 0xb6, 0x09, 0x73, 0x01, 0x56, 0x72,
	0x49, 0x04, 0xa3, 0x12, 0x4c, 0x1d, 0x1b, 0x3d, 0x97, 0x78, 0xa4, 0xf2, 0xba, 0x58, 0x68, 0x3d,
	0x28, 0x6c, 0x93, 0x81, 0x4d, 0x4d, 0xe6, 0x9b, 0x0b, 0x25, 0xbd, 0x12, 0x49, 0xfa, 0x48, 0xa9,
	0xa4, 0x62, 0xa5, 0xc2, 0x7d, 0x60, 0x7b, 0xd9, 0x90, 0xd7, 0x53, 0x7c, 0x56, 0xfa, 0xd6, 0xd2,
	0x61, 0x6b, 0x4f, 0x60, 0x2e, 0xb0, 0x76, 0x1d, 0xce, 0x7b, 0xae, 0x40, 0xe9, 0x33, 0xa3, 0x67,
	0x62, 0x83, 0x91, 0x4f, 0x1c, 0xdb, 0x3e, 0xf4, 0x2f, 0x75, 0x41, 0x09, 0x2a, 0x17, 0x94, 0x20,
	0xba, 0x09, 0x20, 0xa7, 0x95, 0x7f, 0xe9, 0xbc, 0x9e, 0x95, 0x92, 0x58, 0x16, 0x89, 0xbb, 0xfb,
	0x59, 0xc4, 0xb3, 0x25, 0xc6, 0xe4, 0x3a, 0x2e, 0xfc, 0xad, 0x02, 0xf3, 0x7b, 0x1d, 0xc7, 0x18,
	0xfc, 0xc7, 0xb7, 0x35, 0x00, 0x85, 0x69, 0x5c, 0xc7, 0x55, 0xef, 0xc1, 0xec, 0xe7, 0xb6, 0xf3,
	0x94, 0x38, 0x09, 0x75, 0x91, 0x1d, 0xd6, 0xc5, 0x8b, 0x14, 0x14, 0x7c, 0xec, 0xf8, 0xba, 0x18,
	0x82, 0xd1, 0x7b, 0x30, 0xc5, 0x2d, 0x10, 0xc9, 0xe9, 0xd6, 0x78, 0x4e, 0x42, 0x1d, 0xa7, 0x44,
	0x74, 0x81, 0x47, 0x2b, 0x90, 0x63, 0x36, 0x33, 0x7a, 0xbc, 0xb3, 0x3d, 0x25, 0xb2, 0x13, 0x82,
	0x27, 0xda, 0xe3, 0x12, 0xee, 0x4e, 0x4a, 0x7a, 0x87, 0x72, 0x5f, 0xb4, 0xfa, 0x2c, 0x97, 0x88,
	0xed, 0x55, 0x98, 0xc3, 0xa4, 0x47, 0xba, 0x06, 0x23, 0x58, 0x62, 0xe4, 0x38, 0x0f, 0xc4, 0x02,
	0xd8, 0x80, 0x59, 0x87, 0x74, 0x4d, 0xca, 0x88, 0x43, 0x70, 0xdb, 0x60, 0xde, 0x10, 0xcf, 0x6d,
	0xa8, 0x75, 0xf1, 0x5a, 0xac, 0xfb, 0xaf, 0xc5, 0x7a, 0xcb, 0x7f, 0x2d, 0x6e, 0xa5, 0xbf, 0xfb,
	0x63, 0x45, 0xd1, 0xf3, 0xc3, 0x63, 0x9b, 0x4c, 0xfb, 0x14, 0x16, 0x3e, 0x32, 0x29, 0x13, 0x37,
	0xa1, 0x81, 0x67, 0xde, 0x87, 0x29, 0x93, 0x91, 0x3e, 0xf7, 0xcb, 0x64, 0x2d, 0xb7, 0xf1, 0xff,
	0x8b, 0xee, 0xef, 0x1f, 0xd2, 0xc5, 0x11, 0x6d, 0x1f, 0xe6, 0x36, 0x31, 0xfe, 0xd0, 0xb5, 0x30,
	0xf5, 0xa3, 0x72, 0x3b, 0xd6, 0x3e, 0xb6, 0xe0, 0xfc, 0xf7, 0x95, 0xcc, 0x3e, 0x6f, 0x21, 0xdb,
	0x41, 0x2b, 0xb9, 0x09, 0x60, 0xf4, 0x6d, 0xd7, 0x62, 0x6d, 0x97, 0x8a, 0x44, 0x53, 0xf4, 0xac,
	0x90, 0xec, 0x53, 0xac, 0x21, 0x28, 0x0e, 0xd5, 0x0a, 0x8b, 0x3c, 0xfc, 0xba, 0xd7, 0x87, 0x2f,
	0x0f, 0x7f, 0x0d, 0x0a, 0x3e, 0x54, 0xde, 0x71, 0xd8, 0xd2, 0x95, 0x70, 0x4b, 0x5f, 0xfb, 0x5b,
	0x81, 0x5c, 0x28, 0xb2, 0x9c, 0xfc, 0xd6, 0xc7, 0xbb, 0xdb, 0xcd, 0xdd, 0x9d, 0xe2, 0x84, 0xba,
	0x74, 0x7a, 0x56, 0x45, 0xa1, 0xdd, 0x2d, 0xdb, 0xc2, 0xa6, 0xd5, 0x45, 0xb7, 0x20, 0xc3, 0x41,
	0x8d, 0xed, 0xa2, 0xa2, 0x2e, 0x9e, 0x9e, 0x55, 0xe7, 0x63, 0x18, 0x82, 0xd1, 0x1d, 0x98, 0xd9,
	0xdf, 0x95, 0xa0, 0x94, 0xba, 0x7c, 0x7a, 0x56, 0x5d, 0x08, 0x81, 0xf6, 0xad, 0x03, 0x01, 0x5b,
	0x85, 0xac, 0x80, 0x71, 0x83, 0x93, 0x6a, 0xf9, 0xf4, 0xac, 0x5a, 0x1a, 0xc1, 0x71, 0x93, 0xf7,
	0x21, 0xbf, 0xbf, 0xab, 0x37, 0x76, 0x9a, 0x7b, 0xad, 0x86, 0xde, 0xd8, 0x2e, 0xa6, 0xd5, 0x1b,
	0xa7, 0x67, 0xd5, 0xe5, 0x08, 0x76, 0x18, 0x6b, 0x75, 0xe1, 0xf9, 0x0f, 0x95, 0x89, 0x5f, 0x7e,
	0xac, 0x84, 0xef, 0xb6, 0xf1, 0xd3, 0x0c, 0x14, 0x1a, 0x22, 0xa0, 0x7b, 0xe2, 0xb7, 0x06, 0x19,
	0x00, 0xc3, 0xb7, 0x37, 0x5a, 0x1d, 0x1f, 0xf9, 0x91, 0x5f, 0x07, 0xb5, 0x76, 0x39, 0x50, 0x06,
	0x6d, 0x02, 0x3d, 0x81, 0x6c, 0xf0, 0x84, 0x41, 0x77, 0xc7, 0x1f, 0x8c, 0x3f, 0xca, 0xd4, 0xd5,
	0x4b, 0x71, 0x81, 0xfe, 0xaf, 0x60, 0x36, 0x32, 0x94, 0xd1, 0xda, 0xf8, 0xb3, 0xe3, 0x9e, 0x0c,
	0xea, 0x5b, 0x57, 0xc2, 0x06, 0xb6, 0xbe, 0x00, 0xd8, 0x21, 0x4c, 0x4e, 0x5c, 0x94, 0x50, 0x28,
	0xd1, 0xe1, 0xad, 0xde, 0xb9, 0x04, 0x15, 0x28, 0x7f, 0x04, 0xd3, 0x72, 0x34, 0x26, 0x69, 0x8e,
	0xce, 0xe9, 0x24, 0xcd, 0xb1, 0xf9, 0x2a, 0x5c, 0x14, 0x99, 0x44, 0x49, 0x2e, 0x1a, 0x37, 0x38,
	0x93, 0x5c, 0x34, 0x76, 0xb4, 0x69, 0x13, 0x3c, 0xa3, 0x86, 0x73, 0x20, 0x29, 0xa3, 0x46, 0x06,
	0x56, 0x52, 0x46, 0x8d, 0x8e, 0x14, 0x6d, 0x02, 0xe9, 0x90, 0x0b, 0xb5, 0x31, 0xb4, 0x34, 0xd2,
	0x05, 0x1b, 0xfc, 0xff, 0x5b, 0xbd, 0x37, 0x5e, 0xe5, 0x98, 0x0e, 0xe8, 0x45, 0x76, 0xc6, 0x6f,
	0x38, 0xe8, 0x4e, 0x62, 0x52, 0x84, 0xfb, 0x9c, 0x7a, 0xf7, 0x32, 0x58, 0x28, 0xb2, 0xd9, 0x1d,
	0x22, 0x8d, 0xa2, 0xdb, 0x17, 0xb7, 0x57, 0xa1, 0xfb, 0x4a, 0x3d, 0x38, 0xd0, 0x2c, 0x7a, 0x1d,
	0x4a, 0x1c, 0xa6, 0xa1, 0xa6, 0x99, 0xa4, 0x39, 0xda, 0x2e, 0xb5, 0x89, 0xad, 0xf2, 0xcb, 0xf3,
	0x8a, 0xf2, 0xdb, 0x79, 0x45, 0xf9, 0xf3, 0xbc, 0xa2, 0xfc, 0xfa, 0xaa, 0xa2, 0xbc, 0x7c, 0x55,
	0x51, 0x1e, 0xa7, 0x8e, 0x1f, 0x1c, 0x64, 0x3c, 0x3f, 0xbf, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb3, 0x23, 0x4e, 0xb3, 0x2f, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmitterServiceClient is the client API for EmitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmitterServiceClient interface {
	InitStream(ctx context.Context, in *InitStreamRequest, opts ...grpc.CallOption) (*InitStreamResponse, error)
	EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamResponse, error)
	AddInputChunk(ctx context.Context, in *AddInputChunkRequest, opts ...grpc.CallOption) (*AddInputChunkResponse, error)
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	ValidateProof(ctx context.Context, in *ValidateProofRequest, opts ...grpc.CallOption) (*ValidateProofResponse, error)
	ScrapProof(ctx context.Context, in *ScrapProofRequest, opts ...grpc.CallOption) (*ScrapProofResponse, error)
	ListWorkers(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	AddFunds(ctx context.Context, in *AddFundsRequest, opts ...grpc.CallOption) (*AddFundsResponse, error)
	GetWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerResponse, error)
	GetReward(ctx context.Context, in *RewardRequest, opts ...grpc.CallOption) (*RewardResponse, error)
}

type emitterServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmitterServiceClient(cc *grpc.ClientConn) EmitterServiceClient {
	return &emitterServiceClient{cc}
}

func (c *emitterServiceClient) InitStream(ctx context.Context, in *InitStreamRequest, opts ...grpc.CallOption) (*InitStreamResponse, error) {
	out := new(InitStreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/InitStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamResponse, error) {
	out := new(EndStreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/EndStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) AddInputChunk(ctx context.Context, in *AddInputChunkRequest, opts ...grpc.CallOption) (*AddInputChunkResponse, error) {
	out := new(AddInputChunkResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/AddInputChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) ValidateProof(ctx context.Context, in *ValidateProofRequest, opts ...grpc.CallOption) (*ValidateProofResponse, error) {
	out := new(ValidateProofResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/ValidateProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) ScrapProof(ctx context.Context, in *ScrapProofRequest, opts ...grpc.CallOption) (*ScrapProofResponse, error) {
	out := new(ScrapProofResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/ScrapProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) ListWorkers(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) AddFunds(ctx context.Context, in *AddFundsRequest, opts ...grpc.CallOption) (*AddFundsResponse, error) {
	out := new(AddFundsResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/AddFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) GetWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerResponse, error) {
	out := new(WorkerResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) GetReward(ctx context.Context, in *RewardRequest, opts ...grpc.CallOption) (*RewardResponse, error) {
	out := new(RewardResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.emitter.v1.EmitterService/GetReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServiceServer is the server API for EmitterService service.
type EmitterServiceServer interface {
	InitStream(context.Context, *InitStreamRequest) (*InitStreamResponse, error)
	EndStream(context.Context, *EndStreamRequest) (*EndStreamResponse, error)
	AddInputChunk(context.Context, *AddInputChunkRequest) (*AddInputChunkResponse, error)
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	ValidateProof(context.Context, *ValidateProofRequest) (*ValidateProofResponse, error)
	ScrapProof(context.Context, *ScrapProofRequest) (*ScrapProofResponse, error)
	ListWorkers(context.Context, *types.Empty) (*ListWorkersResponse, error)
	AddFunds(context.Context, *AddFundsRequest) (*AddFundsResponse, error)
	GetWorker(context.Context, *WorkerRequest) (*WorkerResponse, error)
	GetReward(context.Context, *RewardRequest) (*RewardResponse, error)
}

// UnimplementedEmitterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEmitterServiceServer struct {
}

func (*UnimplementedEmitterServiceServer) InitStream(ctx context.Context, req *InitStreamRequest) (*InitStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitStream not implemented")
}
func (*UnimplementedEmitterServiceServer) EndStream(ctx context.Context, req *EndStreamRequest) (*EndStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndStream not implemented")
}
func (*UnimplementedEmitterServiceServer) AddInputChunk(ctx context.Context, req *AddInputChunkRequest) (*AddInputChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInputChunk not implemented")
}
func (*UnimplementedEmitterServiceServer) GetBalance(ctx context.Context, req *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedEmitterServiceServer) Deposit(ctx context.Context, req *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedEmitterServiceServer) ValidateProof(ctx context.Context, req *ValidateProofRequest) (*ValidateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProof not implemented")
}
func (*UnimplementedEmitterServiceServer) ScrapProof(ctx context.Context, req *ScrapProofRequest) (*ScrapProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrapProof not implemented")
}
func (*UnimplementedEmitterServiceServer) ListWorkers(ctx context.Context, req *types.Empty) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedEmitterServiceServer) AddFunds(ctx context.Context, req *AddFundsRequest) (*AddFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFunds not implemented")
}
func (*UnimplementedEmitterServiceServer) GetWorker(ctx context.Context, req *WorkerRequest) (*WorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedEmitterServiceServer) GetReward(ctx context.Context, req *RewardRequest) (*RewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReward not implemented")
}

func RegisterEmitterServiceServer(s *grpc.Server, srv EmitterServiceServer) {
	s.RegisterService(&_EmitterService_serviceDesc, srv)
}

func _EmitterService_InitStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).InitStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/InitStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).InitStream(ctx, req.(*InitStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_EndStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).EndStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/EndStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).EndStream(ctx, req.(*EndStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_AddInputChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInputChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).AddInputChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/AddInputChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).AddInputChunk(ctx, req.(*AddInputChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_ValidateProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).ValidateProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/ValidateProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).ValidateProof(ctx, req.(*ValidateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_ScrapProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).ScrapProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/ScrapProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).ScrapProof(ctx, req.(*ScrapProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).ListWorkers(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_AddFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).AddFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/AddFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).AddFunds(ctx, req.(*AddFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).GetWorker(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_GetReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).GetReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.emitter.v1.EmitterService/GetReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).GetReward(ctx, req.(*RewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.emitter.v1.EmitterService",
	HandlerType: (*EmitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitStream",
			Handler:    _EmitterService_InitStream_Handler,
		},
		{
			MethodName: "EndStream",
			Handler:    _EmitterService_EndStream_Handler,
		},
		{
			MethodName: "AddInputChunk",
			Handler:    _EmitterService_AddInputChunk_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _EmitterService_GetBalance_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _EmitterService_Deposit_Handler,
		},
		{
			MethodName: "ValidateProof",
			Handler:    _EmitterService_ValidateProof_Handler,
		},
		{
			MethodName: "ScrapProof",
			Handler:    _EmitterService_ScrapProof_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _EmitterService_ListWorkers_Handler,
		},
		{
			MethodName: "AddFunds",
			Handler:    _EmitterService_AddFunds_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _EmitterService_GetWorker_Handler,
		},
		{
			MethodName: "GetReward",
			Handler:    _EmitterService_GetReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitter/v1/emitter_service.proto",
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProfilesIds) > 0 {
		for iNdEx := len(m.ProfilesIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfilesIds[iNdEx])
			copy(dAtA[i:], m.ProfilesIds[iNdEx])
			i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ProfilesIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StreamContractId != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.StreamContractId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.AllowRefundTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.AllowRefundTxStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AllowRefundTx) > 0 {
		i -= len(m.AllowRefundTx)
		copy(dAtA[i:], m.AllowRefundTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.AllowRefundTx)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreateStreamTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.CreateStreamTxStatus))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CreateStreamTx) > 0 {
		i -= len(m.CreateStreamTx)
		copy(dAtA[i:], m.CreateStreamTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.CreateStreamTx)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ApproveStreamTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.ApproveStreamTxStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ApproveStreamTx) > 0 {
		i -= len(m.ApproveStreamTx)
		copy(dAtA[i:], m.ApproveStreamTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ApproveStreamTx)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestStreamTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.RequestStreamTxStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestStreamTx) > 0 {
		i -= len(m.RequestStreamTx)
		copy(dAtA[i:], m.RequestStreamTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.RequestStreamTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.StreamContractId != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.StreamContractId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowRefundTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.EscrowRefundTxStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EscrowRefundTx) > 0 {
		i -= len(m.EscrowRefundTx)
		copy(dAtA[i:], m.EscrowRefundTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.EscrowRefundTx)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndStreamTxStatus != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.EndStreamTxStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EndStreamTx) > 0 {
		i -= len(m.EndStreamTx)
		copy(dAtA[i:], m.EndStreamTx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.EndStreamTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddInputChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddInputChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddInputChunkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Reward))))
		i--
		dAtA[i] = 0x21
	}
	if m.ChunkId != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x10
	}
	if m.StreamContractId != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.StreamContractId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddInputChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddInputChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddInputChunkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChunkId) > 0 {
		i -= len(m.ChunkId)
		copy(dAtA[i:], m.ChunkId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ChunkId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfileId) > 0 {
		i -= len(m.ProfileId)
		copy(dAtA[i:], m.ProfileId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ProfileId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScrapProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScrapProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScrapProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChunkId) > 0 {
		i -= len(m.ChunkId)
		copy(dAtA[i:], m.ChunkId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ChunkId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfileId) > 0 {
		i -= len(m.ProfileId)
		copy(dAtA[i:], m.ProfileId)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.ProfileId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScrapProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScrapProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScrapProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RegisteredAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.RegisteredAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.RegisteredAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEmitterService(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DelegatedStake) > 0 {
		i -= len(m.DelegatedStake)
		copy(dAtA[i:], m.DelegatedStake)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.DelegatedStake)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SelfStake) > 0 {
		i -= len(m.SelfStake)
		copy(dAtA[i:], m.SelfStake)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.SelfStake)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalStake) > 0 {
		i -= len(m.TotalStake)
		copy(dAtA[i:], m.TotalStake)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.TotalStake)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintEmitterService(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEmitterService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AmountUsd != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AmountUsd))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEmitterService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Reward))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmitterService(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmitterService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovEmitterService(uint64(m.StreamContractId))
	}
	if len(m.ProfilesIds) > 0 {
		for _, s := range m.ProfilesIds {
			l = len(s)
			n += 1 + l + sovEmitterService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestStreamTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.RequestStreamTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.RequestStreamTxStatus))
	}
	l = len(m.ApproveStreamTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.ApproveStreamTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.ApproveStreamTxStatus))
	}
	l = len(m.CreateStreamTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.CreateStreamTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.CreateStreamTxStatus))
	}
	l = len(m.AllowRefundTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.AllowRefundTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.AllowRefundTxStatus))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovEmitterService(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EndStreamTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.EndStreamTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.EndStreamTxStatus))
	}
	l = len(m.EscrowRefundTx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.EscrowRefundTxStatus != 0 {
		n += 1 + sovEmitterService(uint64(m.EscrowRefundTxStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddInputChunkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamContractId != 0 {
		n += 1 + sovEmitterService(uint64(m.StreamContractId))
	}
	if m.ChunkId != 0 {
		n += 1 + sovEmitterService(uint64(m.ChunkId))
	}
	if m.Reward != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddInputChunkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEmitterService(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEmitterService(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.ChunkId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEmitterService(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScrapProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.ChunkId)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScrapProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEmitterService(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovEmitterService(uint64(m.State))
	}
	l = len(m.TotalStake)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.SelfStake)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	l = len(m.DelegatedStake)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.RegisteredAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.RegisteredAt)
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEmitterService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.AmountUsd != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEmitterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEmitterService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmitterService(x uint64) (n int) {
	return sovEmitterService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilesIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilesIds = append(m.ProfilesIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStreamTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestStreamTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStreamTxStatus", wireType)
			}
			m.RequestStreamTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestStreamTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveStreamTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveStreamTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveStreamTxStatus", wireType)
			}
			m.ApproveStreamTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproveStreamTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateStreamTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateStreamTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateStreamTxStatus", wireType)
			}
			m.CreateStreamTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateStreamTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowRefundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowRefundTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowRefundTxStatus", wireType)
			}
			m.AllowRefundTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowRefundTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndStreamTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndStreamTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndStreamTxStatus", wireType)
			}
			m.EndStreamTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndStreamTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowRefundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowRefundTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowRefundTxStatus", wireType)
			}
			m.EscrowRefundTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowRefundTxStatus |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddInputChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddInputChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddInputChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Reward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddInputChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddInputChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddInputChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = append(m.ProfileId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProfileId == nil {
				m.ProfileId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkId = append(m.ChunkId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChunkId == nil {
				m.ChunkId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScrapProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScrapProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScrapProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = append(m.ProfileId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProfileId == nil {
				m.ProfileId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkId = append(m.ChunkId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChunkId == nil {
				m.ChunkId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScrapProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScrapProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScrapProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= WorkerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatedStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredAt == nil {
				m.RegisteredAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.RegisteredAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &WorkerResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AmountUsd = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmitterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmitterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Reward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEmitterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmitterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmitterService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmitterService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmitterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmitterService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmitterService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmitterService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmitterService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmitterService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmitterService = fmt.Errorf("proto: unexpected end of group")
)

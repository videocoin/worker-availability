syntax = "proto3";

package cloud.api.emitter.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/videocoin/cloud-api/emitter/v1/receipt.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service EmitterService {
    rpc InitStream(InitStreamRequest) returns (InitStreamResponse) {}
    rpc EndStream(EndStreamRequest) returns (EndStreamResponse) {}
    rpc AddInputChunk(AddInputChunkRequest) returns (AddInputChunkResponse) {}
    rpc GetBalance(BalanceRequest) returns (BalanceResponse) {}
    rpc Deposit(DepositRequest) returns (DepositResponse) {}
    rpc ValidateProof(ValidateProofRequest) returns (ValidateProofResponse) {}
    rpc ScrapProof(ScrapProofRequest) returns (ScrapProofResponse) {}
    rpc ListWorkers(google.protobuf.Empty) returns (ListWorkersResponse) {}
    rpc AddFunds(AddFundsRequest) returns (AddFundsResponse) {}
    rpc GetWorker(WorkerRequest) returns (WorkerResponse) {}
    rpc GetReward(RewardRequest) returns (RewardResponse) {}
}

message Tx {
    bytes hash = 1;
}

message InitStreamRequest {
    string stream_id = 1;
    string user_id = 2;
    uint64 stream_contract_id = 3;
    repeated string profiles_ids = 4;
}

message InitStreamResponse {
    string request_stream_tx = 1;
    ReceiptStatus request_stream_tx_status = 2;
    string approve_stream_tx = 3;
    ReceiptStatus approve_stream_tx_status = 4;
    string create_stream_tx = 5;
    ReceiptStatus create_stream_tx_status = 6;
    string allow_refund_tx = 7;
    ReceiptStatus allow_refund_tx_status = 8;
    string stream_contract_address = 9;
}

message EndStreamRequest {
    string stream_id = 1;
    string user_id = 2;
    uint64 stream_contract_id = 3;
    string stream_contract_address = 4;
}

message EndStreamResponse {
    string end_stream_tx = 1;
    ReceiptStatus end_stream_tx_status = 2;
    string escrow_refund_tx = 3;
    ReceiptStatus escrow_refund_tx_status = 4;
}

message AddInputChunkRequest {
    uint64 stream_contract_id = 1;
    uint64 chunk_id = 2;
    double reward = 4;
}

message AddInputChunkResponse {
    string tx = 1;
    ReceiptStatus status = 2;
}

message BalanceRequest {
    bytes address = 1;
}

message BalanceResponse {
    bytes address = 1;
    bytes value = 2;
}

message DepositRequest {
    string user_id = 1;
    string stream_id = 2;
    bytes to = 3;
    bytes value = 4;
}

message DepositResponse {
    string tx = 1;
    ReceiptStatus status = 2;
}

message ValidateProofRequest {
    string stream_contract_address = 1;
    bytes profile_id = 2;
    bytes chunk_id = 3;
}

message ValidateProofResponse {
    string tx = 1;
    ReceiptStatus status = 2;
}

message ScrapProofRequest {
    string stream_contract_address = 1;
    bytes profile_id = 2;
    bytes chunk_id = 3;
}

message ScrapProofResponse {
    string tx = 1;
    ReceiptStatus status = 2;
}

enum WorkerState {
    option (gogoproto.goproto_enum_prefix) = false;
    option (gogoproto.enum_customname) = "WorkerState";

    BONDING   = 0 [(gogoproto.enumvalue_customname) = "WorkerStateBonding"];
    BONDED    = 1 [(gogoproto.enumvalue_customname) = "WorkerStateBonded"];
    UNBONDED  = 2 [(gogoproto.enumvalue_customname) = "WorkerStateUnbonded"];
    UNBONDING = 3 [(gogoproto.enumvalue_customname) = "WorkerStateUnbonding"];
    UNREGISTERED = 4 [(gogoproto.enumvalue_customname) = "WorkerStateUnregistered"];
}

message WorkerRequest {
    string address = 1;
}

message WorkerResponse {
    string address = 1;
    WorkerState state = 2;
    string total_stake = 3;
    string self_stake = 4;
    string delegated_stake = 5;
    google.protobuf.Timestamp registered_at = 6 [(gogoproto.stdtime) = true];
}

message ListWorkersResponse {
    repeated WorkerResponse items = 1;
}

message AddFundsRequest {
    string user_id = 1 [(gogoproto.customname) = "UserID"];
    double amount_usd = 2;
}

message AddFundsResponse {}

message RewardRequest {
    string address = 1;
}

message RewardResponse {
    double reward = 1;
}

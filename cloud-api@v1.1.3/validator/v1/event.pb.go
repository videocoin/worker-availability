// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/v1/event.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventTypeUnknown        EventType = 0
	EventTypeValidatedProof EventType = 1
	EventTypeScrapedProof   EventType = 2
)

var EventType_name = map[int32]string{
	0: "EVENT_TYPE_UNKNOWN",
	1: "EVENT_TYPE_VALIDATED_PROOF",
	2: "EVENT_TYPE_SCRAPED_PROOF",
}

var EventType_value = map[string]int32{
	"EVENT_TYPE_UNKNOWN":         0,
	"EVENT_TYPE_VALIDATED_PROOF": 1,
	"EVENT_TYPE_SCRAPED_PROOF":   2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edfaa6ad71c6aabe, []int{0}
}

type Event struct {
	Type                  EventType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.api.validator.v1.EventType" json:"type,omitempty"`
	StreamContractAddress string    `protobuf:"bytes,2,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	ChunkNum              uint64    `protobuf:"varint,3,opt,name=chunk_num,json=chunkNum,proto3" json:"chunk_num,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_edfaa6ad71c6aabe, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventTypeUnknown
}

func (m *Event) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *Event) GetChunkNum() uint64 {
	if m != nil {
		return m.ChunkNum
	}
	return 0
}

func (*Event) XXX_MessageName() string {
	return "cloud.api.validator.v1.Event"
}
func init() {
	proto.RegisterEnum("cloud.api.validator.v1.EventType", EventType_name, EventType_value)
	golang_proto.RegisterEnum("cloud.api.validator.v1.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Event)(nil), "cloud.api.validator.v1.Event")
	golang_proto.RegisterType((*Event)(nil), "cloud.api.validator.v1.Event")
}

func init() { proto.RegisterFile("validator/v1/event.proto", fileDescriptor_edfaa6ad71c6aabe) }
func init() { golang_proto.RegisterFile("validator/v1/event.proto", fileDescriptor_edfaa6ad71c6aabe) }

var fileDescriptor_edfaa6ad71c6aabe = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x8e, 0xd2, 0x40,
	0x18, 0xc7, 0x19, 0x44, 0x23, 0x73, 0x30, 0x38, 0x11, 0xa9, 0xc5, 0x34, 0xd5, 0x13, 0x31, 0xda,
	0x06, 0x8d, 0x7a, 0xf0, 0x54, 0xa1, 0x26, 0x46, 0x53, 0x9a, 0x52, 0x30, 0x7a, 0x69, 0x86, 0x76,
	0x28, 0x0d, 0x74, 0xa6, 0x69, 0xa7, 0x35, 0xbc, 0x81, 0xe1, 0xea, 0x99, 0x93, 0x3e, 0xc5, 0x9e,
	0x36, 0x7b, 0xe2, 0xb8, 0x8f, 0xb0, 0x81, 0x17, 0xd9, 0xec, 0x94, 0x74, 0x39, 0xec, 0x6d, 0xbe,
	0xef, 0xff, 0xfb, 0xe5, 0x3f, 0x33, 0x50, 0x2a, 0xf0, 0x2a, 0x0a, 0x30, 0x67, 0xa9, 0x5e, 0xf4,
	0x75, 0x52, 0x10, 0xca, 0xb5, 0x24, 0x65, 0x9c, 0xa1, 0xa7, 0xfe, 0x8a, 0xe5, 0x81, 0x86, 0x93,
	0x48, 0xab, 0x18, 0xad, 0xe8, 0xcb, 0xcf, 0x43, 0xc6, 0xc2, 0x15, 0xd1, 0x71, 0x12, 0xe9, 0x98,
	0x52, 0xc6, 0x31, 0x8f, 0x18, 0xcd, 0x4a, 0x4b, 0x7e, 0x13, 0x46, 0x7c, 0x91, 0xcf, 0x34, 0x9f,
	0xc5, 0x7a, 0xc8, 0x42, 0xa6, 0x8b, 0xf5, 0x2c, 0x9f, 0x8b, 0x49, 0x0c, 0xe2, 0x54, 0xe2, 0x2f,
	0xff, 0x02, 0x78, 0xdf, 0xbc, 0x29, 0x45, 0xef, 0x61, 0x83, 0xaf, 0x13, 0x22, 0x01, 0x15, 0xf4,
	0x1e, 0xbd, 0x7d, 0xa1, 0xdd, 0xdd, 0xae, 0x09, 0xd8, 0x5d, 0x27, 0xc4, 0x11, 0x38, 0xfa, 0x00,
	0x3b, 0x19, 0x4f, 0x09, 0x8e, 0x3d, 0x9f, 0x51, 0x9e, 0x62, 0x9f, 0x7b, 0x38, 0x08, 0x52, 0x92,
	0x65, 0x52, 0x5d, 0x05, 0xbd, 0xa6, 0xd3, 0x2e, 0xe3, 0xc1, 0x31, 0x35, 0xca, 0x10, 0x75, 0x61,
	0xd3, 0x5f, 0xe4, 0x74, 0xe9, 0xd1, 0x3c, 0x96, 0xee, 0xa9, 0xa0, 0xd7, 0x70, 0x1e, 0x8a, 0x85,
	0x95, 0xc7, 0xaf, 0x2e, 0x00, 0x6c, 0x56, 0x45, 0xe8, 0x35, 0x44, 0xe6, 0xd4, 0xb4, 0x5c, 0xcf,
	0xfd, 0x69, 0x9b, 0xde, 0xc4, 0xfa, 0x66, 0x8d, 0x7e, 0x58, 0xad, 0x9a, 0xfc, 0x64, 0xb3, 0x55,
	0x5b, 0x15, 0x36, 0xa1, 0x4b, 0xca, 0x7e, 0x53, 0xf4, 0x09, 0xca, 0x27, 0xf4, 0xd4, 0xf8, 0xfe,
	0x75, 0x68, 0xb8, 0xe6, 0xd0, 0xb3, 0x9d, 0xd1, 0xe8, 0x4b, 0x0b, 0xc8, 0xdd, 0xcd, 0x56, 0xed,
	0x54, 0xd6, 0xb4, 0x7c, 0x1b, 0x09, 0xec, 0x94, 0xb1, 0x39, 0xfa, 0x08, 0xa5, 0x13, 0x79, 0x3c,
	0x70, 0x0c, 0xbb, 0x52, 0xeb, 0xf2, 0xb3, 0xcd, 0x56, 0x6d, 0x57, 0xea, 0xd8, 0x4f, 0x71, 0x72,
	0x14, 0xe5, 0xc7, 0x7f, 0xfe, 0x29, 0xb5, 0xb3, 0xff, 0xca, 0xed, 0xb5, 0x3f, 0x4b, 0xbb, 0xbd,
	0x02, 0x2e, 0xf7, 0x0a, 0xb8, 0xda, 0x2b, 0xe0, 0xfc, 0xa0, 0x80, 0xdd, 0x41, 0x01, 0xbf, 0xea,
	0x45, 0x7f, 0xf6, 0x40, 0xfc, 0xfd, 0xbb, 0xeb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x7b, 0xeb,
	0x4e, 0xfc, 0x01, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChunkNum != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChunkNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvent(uint64(m.Type))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChunkNum != 0 {
		n += 1 + sovEvent(uint64(m.ChunkNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkNum", wireType)
			}
			m.ChunkNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)

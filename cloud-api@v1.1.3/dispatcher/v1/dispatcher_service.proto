syntax = "proto3";

package cloud.api.dispatcher.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "dispatcher/v1/task.proto";
import "github.com/videocoin/cloud-api/validator/v1/validator_service.proto";
import "github.com/videocoin/cloud-api/emitter/v1/receipt.proto";
import "github.com/videocoin/cloud-api/miners/v1/miner_service.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service DispatcherService {
  rpc GetInternalConfig(InternalConfigRequest) returns (InternalConfigResponse) {}
  rpc GetConfig(ConfigRequest) returns (ConfigResponse) {}
  rpc GetDelegatorConfig(ConfigRequest) returns (ConfigResponse) {}
  rpc Register(cloud.api.miners.v1.RegistrationRequest) returns (google.protobuf.Empty) {}
  rpc Ping(cloud.api.miners.v1.PingRequest) returns (cloud.api.miners.v1.PingResponse) {}
  rpc GetPendingTask(TaskPendingRequest) returns (cloud.api.dispatcher.v1.Task) {}
  rpc GetTask(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
  rpc MarkTaskAsCompleted(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
  rpc MarkTaskAsFailed(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
  rpc MarkTaskAsPaused(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
  rpc MarkSegmentAsTranscoded(TaskSegmentRequest) returns (google.protobuf.Empty) {}
  rpc ValidateProof(cloud.api.validator.v1.ValidateProofRequest) returns (cloud.api.validator.v1.ValidateProofResponse) {}
  rpc AddInputChunk(AddInputChunkRequest) returns (AddInputChunkResponse) {}

  rpc GetDelegatorConfigV2(ConfigRequest) returns (DelegatorConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/delegator/config"
    };
  }
}

message TaskPendingRequest {
  double total_stake = 1;
  double capacity_encode = 2;
  double capacity_cpu = 3;
  string worker_state = 4;
  string version = 5;
  TaskType type = 6;
}

message TaskRequest {
  string id = 1 [(gogoproto.customname) = "ID"];
}

message InternalConfigRequest {}

message InternalConfigResponse {
  string key = 1;
  string secret = 2;
  string client_id = 3;
}

message ConfigRequest {}

message ConfigResponse {
    string rpc_node_url = 1 [(gogoproto.customname) = "RPCNodeURL"];
    string syncer_url = 2 [(gogoproto.customname) = "SyncerURL"];
    string access_key = 3;
    string staking_manager_address = 4;
}

message TaskSegmentRequest {
  string id = 1 [(gogoproto.customname) = "ID"];
  uint64 num = 2;
  double duration = 3;
}

message AddInputChunkRequest {
  string stream_id = 1;
  uint64 stream_contract_id = 2;
  uint64 chunk_id = 3;
  double reward = 4;
}

message AddInputChunkResponse {
  string tx = 1;
  cloud.api.emitter.v1.ReceiptStatus status = 2;
}

message DelegatorConfigResponse {
  string rpc_node_url = 1 [(gogoproto.customname) = "RPCNodeURL"];
  string access_key = 2;
}

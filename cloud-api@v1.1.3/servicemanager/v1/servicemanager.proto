syntax = "proto3";

package cloud.api.servicemanager.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

import "servicemanager/v1/resources.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = false;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service ServiceManager {
  // Lists managed services.
  //
  // Returns all public services.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {}

  // Gets a managed service.
  rpc GetService(GetServiceRequest) returns (ManagedService) {}

  // Creates a new managed service.
  rpc CreateService(CreateServiceRequest) returns (ManagedService) {}

  // Deletes a managed service.
  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {}

  // Enables a
  // [service][cloud.api.servicemanager.v1.ManagedService] for a
  // project, so it can be used for the project.
  rpc EnableService(EnableServiceRequest) returns (google.protobuf.Empty) {}

  // Disables a
  // [service][cloud.api.servicemanager.v1.ManagedService] for a
  // project, so it can no longer be be used for the project. It prevents
  // security leaks.
  rpc DisableService(DisableServiceRequest) returns (google.protobuf.Empty) {}
}

// Request message for `ListServices` method.
message ListServicesRequest {
  // The max number of items to include in the response list. Page size is 50
  // if not specified. Maximum value is 100.
  int32 page_size = 1;

  // Token identifying which result to start with; returned by a previous list
  // call.
  string page_token = 2;

  // Include services consumed by the specified consumer.
  //
  // The implementation accepts the following forms:
  // - "<project_id>"
  string consumer_id = 3;
}

// Response message for `ListServices` method.
message ListServicesResponse {
  // The returned services will only have the name field set.
  repeated ManagedService services = 1;

  // Token that can be passed to `ListServices` to resume a paginated query.
  string next_page_token = 2;
}

// Request message for `GetService` method.
message GetServiceRequest {
  // Required. The name of the service. For example:
  // `symphony.videocoin.network`.
  string service_name = 1;
}

// Request message for CreateService method.
message CreateServiceRequest {
  // Required. Initial values for the service resource.
  ManagedService service = 1;
}

// Request message for DeleteService method.
message DeleteServiceRequest {
  // Required. The name of the service. For example:
  // `symphony.videocoin.network`.
  string service_name = 1;
}

// Request message for EnableService method.
message EnableServiceRequest {
  // Required. Name of the service to enable. Specifying an unknown service name
  // will cause the request to fail.
  string service_name = 1;

  // Required. The identity of consumer resource which service enablement will
  // be applied to.
  //
  // The implementation accepts the following
  // forms:
  // - "<project_id>"
  string consumer_id = 2;
}

// Request message for DisableService method.
message DisableServiceRequest {
  // Required. Name of the service to disable. Specifying an unknown service
  // name will cause the request to fail.
  string service_name = 1;

  // Required. The identity of consumer resource which service disablement will
  // be applied to.
  //
  // The implementation accepts the following
  // forms:
  // - "<project_id>"
  //
  string consumer_id = 2;
}
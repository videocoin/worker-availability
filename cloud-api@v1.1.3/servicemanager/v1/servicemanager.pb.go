// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicemanager/v1/servicemanager.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request message for `ListServices` method.
type ListServicesRequest struct {
	// The max number of items to include in the response list. Page size is 50
	// if not specified. Maximum value is 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token identifying which result to start with; returned by a previous list
	// call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Include services consumed by the specified consumer.
	//
	// The implementation accepts the following forms:
	// - "<project_id>"
	ConsumerId           string   `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServicesRequest) Reset()         { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()    {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{0}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesRequest.Unmarshal(m, b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
}
func (m *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(m, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListServicesRequest.Size(m)
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

func (m *ListServicesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListServicesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListServicesRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (*ListServicesRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.ListServicesRequest"
}

// Response message for `ListServices` method.
type ListServicesResponse struct {
	// The returned services will only have the name field set.
	Services []*ManagedService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// Token that can be passed to `ListServices` to resume a paginated query.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServicesResponse) Reset()         { *m = ListServicesResponse{} }
func (m *ListServicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListServicesResponse) ProtoMessage()    {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{1}
}
func (m *ListServicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesResponse.Unmarshal(m, b)
}
func (m *ListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesResponse.Marshal(b, m, deterministic)
}
func (m *ListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponse.Merge(m, src)
}
func (m *ListServicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListServicesResponse.Size(m)
}
func (m *ListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponse proto.InternalMessageInfo

func (m *ListServicesResponse) GetServices() []*ManagedService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ListServicesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (*ListServicesResponse) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.ListServicesResponse"
}

// Request message for `GetService` method.
type GetServiceRequest struct {
	// Required. The name of the service. For example:
	// `symphony.videocoin.network`.
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{2}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceRequest.Unmarshal(m, b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
}
func (m *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(m, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return xxx_messageInfo_GetServiceRequest.Size(m)
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (*GetServiceRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.GetServiceRequest"
}

// Request message for CreateService method.
type CreateServiceRequest struct {
	// Required. Initial values for the service resource.
	Service              *ManagedService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateServiceRequest) Reset()         { *m = CreateServiceRequest{} }
func (m *CreateServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateServiceRequest) ProtoMessage()    {}
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{3}
}
func (m *CreateServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateServiceRequest.Unmarshal(m, b)
}
func (m *CreateServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateServiceRequest.Marshal(b, m, deterministic)
}
func (m *CreateServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceRequest.Merge(m, src)
}
func (m *CreateServiceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateServiceRequest.Size(m)
}
func (m *CreateServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceRequest proto.InternalMessageInfo

func (m *CreateServiceRequest) GetService() *ManagedService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (*CreateServiceRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.CreateServiceRequest"
}

// Request message for DeleteService method.
type DeleteServiceRequest struct {
	// Required. The name of the service. For example:
	// `symphony.videocoin.network`.
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServiceRequest) Reset()         { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()    {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{4}
}
func (m *DeleteServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServiceRequest.Unmarshal(m, b)
}
func (m *DeleteServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServiceRequest.Marshal(b, m, deterministic)
}
func (m *DeleteServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceRequest.Merge(m, src)
}
func (m *DeleteServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteServiceRequest.Size(m)
}
func (m *DeleteServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceRequest proto.InternalMessageInfo

func (m *DeleteServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (*DeleteServiceRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.DeleteServiceRequest"
}

// Request message for EnableService method.
type EnableServiceRequest struct {
	// Required. Name of the service to enable. Specifying an unknown service name
	// will cause the request to fail.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Required. The identity of consumer resource which service enablement will
	// be applied to.
	//
	// The implementation accepts the following
	// forms:
	// - "<project_id>"
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableServiceRequest) Reset()         { *m = EnableServiceRequest{} }
func (m *EnableServiceRequest) String() string { return proto.CompactTextString(m) }
func (*EnableServiceRequest) ProtoMessage()    {}
func (*EnableServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{5}
}
func (m *EnableServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableServiceRequest.Unmarshal(m, b)
}
func (m *EnableServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableServiceRequest.Marshal(b, m, deterministic)
}
func (m *EnableServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableServiceRequest.Merge(m, src)
}
func (m *EnableServiceRequest) XXX_Size() int {
	return xxx_messageInfo_EnableServiceRequest.Size(m)
}
func (m *EnableServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableServiceRequest proto.InternalMessageInfo

func (m *EnableServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *EnableServiceRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (*EnableServiceRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.EnableServiceRequest"
}

// Request message for DisableService method.
type DisableServiceRequest struct {
	// Required. Name of the service to disable. Specifying an unknown service
	// name will cause the request to fail.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Required. The identity of consumer resource which service disablement will
	// be applied to.
	//
	// The implementation accepts the following
	// forms:
	// - "<project_id>"
	//
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableServiceRequest) Reset()         { *m = DisableServiceRequest{} }
func (m *DisableServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DisableServiceRequest) ProtoMessage()    {}
func (*DisableServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fbab3f4ea50dd0, []int{6}
}
func (m *DisableServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableServiceRequest.Unmarshal(m, b)
}
func (m *DisableServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableServiceRequest.Marshal(b, m, deterministic)
}
func (m *DisableServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableServiceRequest.Merge(m, src)
}
func (m *DisableServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DisableServiceRequest.Size(m)
}
func (m *DisableServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableServiceRequest proto.InternalMessageInfo

func (m *DisableServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DisableServiceRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (*DisableServiceRequest) XXX_MessageName() string {
	return "cloud.api.servicemanager.v1.DisableServiceRequest"
}
func init() {
	proto.RegisterType((*ListServicesRequest)(nil), "cloud.api.servicemanager.v1.ListServicesRequest")
	golang_proto.RegisterType((*ListServicesRequest)(nil), "cloud.api.servicemanager.v1.ListServicesRequest")
	proto.RegisterType((*ListServicesResponse)(nil), "cloud.api.servicemanager.v1.ListServicesResponse")
	golang_proto.RegisterType((*ListServicesResponse)(nil), "cloud.api.servicemanager.v1.ListServicesResponse")
	proto.RegisterType((*GetServiceRequest)(nil), "cloud.api.servicemanager.v1.GetServiceRequest")
	golang_proto.RegisterType((*GetServiceRequest)(nil), "cloud.api.servicemanager.v1.GetServiceRequest")
	proto.RegisterType((*CreateServiceRequest)(nil), "cloud.api.servicemanager.v1.CreateServiceRequest")
	golang_proto.RegisterType((*CreateServiceRequest)(nil), "cloud.api.servicemanager.v1.CreateServiceRequest")
	proto.RegisterType((*DeleteServiceRequest)(nil), "cloud.api.servicemanager.v1.DeleteServiceRequest")
	golang_proto.RegisterType((*DeleteServiceRequest)(nil), "cloud.api.servicemanager.v1.DeleteServiceRequest")
	proto.RegisterType((*EnableServiceRequest)(nil), "cloud.api.servicemanager.v1.EnableServiceRequest")
	golang_proto.RegisterType((*EnableServiceRequest)(nil), "cloud.api.servicemanager.v1.EnableServiceRequest")
	proto.RegisterType((*DisableServiceRequest)(nil), "cloud.api.servicemanager.v1.DisableServiceRequest")
	golang_proto.RegisterType((*DisableServiceRequest)(nil), "cloud.api.servicemanager.v1.DisableServiceRequest")
}

func init() {
	proto.RegisterFile("servicemanager/v1/servicemanager.proto", fileDescriptor_32fbab3f4ea50dd0)
}
func init() {
	golang_proto.RegisterFile("servicemanager/v1/servicemanager.proto", fileDescriptor_32fbab3f4ea50dd0)
}

var fileDescriptor_32fbab3f4ea50dd0 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0x54, 0x85, 0x66, 0xd2, 0x14, 0xb1, 0x04, 0x64, 0x39, 0xc2, 0xa4, 0x3e, 0x54,
	0x91, 0x10, 0x1b, 0x12, 0x24, 0x24, 0xae, 0xd0, 0xa8, 0x42, 0x02, 0x84, 0x5c, 0x4e, 0xe5, 0x4f,
	0xe4, 0x38, 0x83, 0xb1, 0x1a, 0x7b, 0xdd, 0x5d, 0x3b, 0x82, 0x5e, 0x39, 0xf0, 0x5a, 0x1c, 0x7b,
	0xe4, 0x11, 0x50, 0xfa, 0x22, 0x28, 0x6b, 0x9b, 0xe2, 0xd8, 0x38, 0xf8, 0xc0, 0xcd, 0x9e, 0x99,
	0xef, 0xdb, 0x6f, 0x77, 0x7f, 0x5a, 0x38, 0x10, 0xc8, 0x17, 0x9e, 0x83, 0xbe, 0x1d, 0xd8, 0x2e,
	0xf2, 0xc1, 0x62, 0x38, 0xc8, 0x57, 0x68, 0xc8, 0x59, 0xc4, 0x48, 0xd7, 0x99, 0xb3, 0x78, 0x46,
	0xed, 0xd0, 0xa3, 0x6b, 0xfd, 0xc5, 0x50, 0x7f, 0xe0, 0x7a, 0xd1, 0xa7, 0x78, 0x4a, 0x1d, 0xe6,
	0x0f, 0x5c, 0xe6, 0xb2, 0x81, 0xd4, 0x4c, 0xe3, 0x8f, 0xf2, 0x4f, 0xfe, 0xc8, 0xaf, 0xc4, 0x4b,
	0xef, 0xba, 0x8c, 0xb9, 0x73, 0xbc, 0x9a, 0x42, 0x3f, 0x8c, 0xbe, 0xa4, 0xcd, 0xfd, 0x62, 0x20,
	0x8e, 0x82, 0xc5, 0xdc, 0x41, 0x91, 0x8c, 0x98, 0x1c, 0x6e, 0xbd, 0xf0, 0x44, 0x74, 0x9c, 0x0c,
	0x0a, 0x0b, 0xcf, 0x62, 0x14, 0x11, 0xe9, 0x42, 0x33, 0xb4, 0x5d, 0x9c, 0x08, 0xef, 0x1c, 0x35,
	0xb5, 0xa7, 0xf6, 0xb7, 0xad, 0x9d, 0x55, 0xe1, 0xd8, 0x3b, 0x47, 0x72, 0x17, 0x40, 0x36, 0x23,
	0x76, 0x8a, 0x81, 0xd6, 0xe8, 0xa9, 0xfd, 0xa6, 0x25, 0xc7, 0xdf, 0xac, 0x0a, 0xe4, 0x1e, 0xb4,
	0x1c, 0x16, 0x88, 0xd8, 0x47, 0x3e, 0xf1, 0x66, 0xda, 0x96, 0xec, 0x43, 0x56, 0x7a, 0x3e, 0x33,
	0xbf, 0xa9, 0xd0, 0xc9, 0x2f, 0x2a, 0x42, 0x16, 0x08, 0x24, 0x47, 0xb0, 0x93, 0x26, 0x16, 0x9a,
	0xda, 0xdb, 0xea, 0xb7, 0x46, 0xf7, 0x69, 0xc5, 0x59, 0xd1, 0x97, 0xf2, 0x73, 0x96, 0xfa, 0x58,
	0xbf, 0xc5, 0xe4, 0x00, 0x6e, 0x04, 0xf8, 0x39, 0x9a, 0x14, 0x62, 0xb6, 0x57, 0xe5, 0xd7, 0x59,
	0x54, 0xf3, 0x31, 0xdc, 0x3c, 0xc2, 0x2c, 0x47, 0xb6, 0xf7, 0x7d, 0xd8, 0x4d, 0x8d, 0x26, 0x81,
	0xed, 0x27, 0xdb, 0x6f, 0x5a, 0xad, 0xb4, 0xf6, 0xca, 0xf6, 0xd1, 0x7c, 0x0f, 0x9d, 0x67, 0x1c,
	0xed, 0x08, 0xd7, 0xa4, 0x63, 0xb8, 0x9e, 0x8e, 0x49, 0x55, 0xcd, 0xfc, 0x99, 0xd6, 0x7c, 0x02,
	0x9d, 0x43, 0x9c, 0x63, 0xc1, 0xfe, 0x1f, 0x92, 0x9d, 0x40, 0x67, 0x1c, 0xd8, 0xd3, 0x79, 0x7d,
	0xe9, 0xfa, 0xbd, 0x35, 0x0a, 0xf7, 0xf6, 0x16, 0x6e, 0x1f, 0x7a, 0xe2, 0xff, 0x98, 0x8f, 0xbe,
	0x6e, 0xc3, 0x5e, 0x6a, 0x9b, 0x1c, 0x0b, 0x27, 0x31, 0xec, 0xfe, 0x89, 0x09, 0x79, 0x58, 0x79,
	0x98, 0x25, 0x18, 0xeb, 0xc3, 0x1a, 0x8a, 0x84, 0x41, 0x53, 0x21, 0xa7, 0x00, 0x57, 0x50, 0x10,
	0x5a, 0x69, 0x51, 0xa0, 0x47, 0xaf, 0x73, 0xe3, 0xa6, 0x42, 0xce, 0xa0, 0x9d, 0x23, 0x89, 0x54,
	0x47, 0x2e, 0xa3, 0xae, 0xee, 0x92, 0xef, 0xa0, 0x9d, 0xa3, 0x6b, 0xc3, 0x92, 0x65, 0x24, 0xea,
	0x77, 0x68, 0xf2, 0xee, 0xd0, 0xec, 0xdd, 0xa1, 0xe3, 0xd5, 0xbb, 0x93, 0xb8, 0xe7, 0x00, 0xdc,
	0xe0, 0x5e, 0x06, 0x6b, 0x85, 0xfb, 0x07, 0xd8, 0xcb, 0x23, 0x48, 0x46, 0xd5, 0xe1, 0xcb, 0x78,
	0xfd, 0xbb, 0xff, 0x53, 0xed, 0x62, 0x69, 0x28, 0x3f, 0x96, 0x86, 0xf2, 0x73, 0x69, 0x28, 0xdf,
	0x2f, 0x0d, 0xf5, 0xe2, 0xd2, 0x50, 0x4f, 0x1a, 0x8b, 0xe1, 0xf4, 0x9a, 0x9c, 0x7d, 0xf4, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0x55, 0xea, 0x92, 0xe5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceManagerClient interface {
	// Lists managed services.
	//
	// Returns all public services.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Gets a managed service.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ManagedService, error)
	// Creates a new managed service.
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*ManagedService, error)
	// Deletes a managed service.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Enables a
	// [service][cloud.api.servicemanager.v1.ManagedService] for a
	// project, so it can be used for the project.
	EnableService(ctx context.Context, in *EnableServiceRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Disables a
	// [service][cloud.api.servicemanager.v1.ManagedService] for a
	// project, so it can no longer be be used for the project. It prevents
	// security leaks.
	DisableService(ctx context.Context, in *DisableServiceRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type serviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewServiceManagerClient(cc *grpc.ClientConn) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ManagedService, error) {
	out := new(ManagedService)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*ManagedService, error) {
	out := new(ManagedService)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) EnableService(ctx context.Context, in *EnableServiceRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/EnableService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) DisableService(ctx context.Context, in *DisableServiceRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.servicemanager.v1.ServiceManager/DisableService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
type ServiceManagerServer interface {
	// Lists managed services.
	//
	// Returns all public services.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Gets a managed service.
	GetService(context.Context, *GetServiceRequest) (*ManagedService, error)
	// Creates a new managed service.
	CreateService(context.Context, *CreateServiceRequest) (*ManagedService, error)
	// Deletes a managed service.
	DeleteService(context.Context, *DeleteServiceRequest) (*types.Empty, error)
	// Enables a
	// [service][cloud.api.servicemanager.v1.ManagedService] for a
	// project, so it can be used for the project.
	EnableService(context.Context, *EnableServiceRequest) (*types.Empty, error)
	// Disables a
	// [service][cloud.api.servicemanager.v1.ManagedService] for a
	// project, so it can no longer be be used for the project. It prevents
	// security leaks.
	DisableService(context.Context, *DisableServiceRequest) (*types.Empty, error)
}

// UnimplementedServiceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedServiceManagerServer struct {
}

func (*UnimplementedServiceManagerServer) ListServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (*UnimplementedServiceManagerServer) GetService(ctx context.Context, req *GetServiceRequest) (*ManagedService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedServiceManagerServer) CreateService(ctx context.Context, req *CreateServiceRequest) (*ManagedService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedServiceManagerServer) DeleteService(ctx context.Context, req *DeleteServiceRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedServiceManagerServer) EnableService(ctx context.Context, req *EnableServiceRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableService not implemented")
}
func (*UnimplementedServiceManagerServer) DisableService(ctx context.Context, req *DisableServiceRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableService not implemented")
}

func RegisterServiceManagerServer(s *grpc.Server, srv ServiceManagerServer) {
	s.RegisterService(&_ServiceManager_serviceDesc, srv)
}

func _ServiceManager_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_EnableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).EnableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/EnableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).EnableService(ctx, req.(*EnableServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_DisableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).DisableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.servicemanager.v1.ServiceManager/DisableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).DisableService(ctx, req.(*DisableServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.servicemanager.v1.ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _ServiceManager_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceManager_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _ServiceManager_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ServiceManager_DeleteService_Handler,
		},
		{
			MethodName: "EnableService",
			Handler:    _ServiceManager_EnableService_Handler,
		},
		{
			MethodName: "DisableService",
			Handler:    _ServiceManager_DisableService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicemanager/v1/servicemanager.proto",
}
